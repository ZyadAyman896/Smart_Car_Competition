
Smart_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000318e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000318e  00003222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  0000322a  2**0
                  ALLOC
  3 .stab         00002d24  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000130f  00000000  00000000  00005f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000725f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000739f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000750f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009158  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a043  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000adf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee e8       	ldi	r30, 0x8E	; 142
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 9d 06 	call	0xd3a	; 0xd3a <main>
      8a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <IR_Sensor_Init>:

#include "IR_Sensor.h"
#include "gpio.h"

void IR_Sensor_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* configure the OUT pin as input */
	GPIO_setupPinDirection(OUT_PORT_ID,OUT_PIN_ID,PIN_INPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <IR_Sensor_Reading>:

uint8 IR_Sensor_Reading(void)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	0f 92       	push	r0
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
	/* if the ir sensor detect an object */
	if(GPIO_readPin(OUT_PORT_ID,OUT_PIN_ID)==LOGIC_LOW)
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	67 e0       	ldi	r22, 0x07	; 7
     b6c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <GPIO_readPin>
     b70:	88 23       	and	r24, r24
     b72:	11 f4       	brne	.+4      	; 0xb78 <IR_Sensor_Reading+0x1a>
	{
		return detect;
     b74:	19 82       	std	Y+1, r1	; 0x01
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <IR_Sensor_Reading+0x1e>
	}
	else
	{
		return Undetect;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <DcMotors_Init>:
#include "gpio.h" /* to use GPIO_setupPinDirection and GPIO_writePin functions */
#include <avr/io.h> /* to use PORT registers */
#include "pwm.h" /* to use PWM_Timer0_Generate function to control speed of the motor */

void DcMotors_Init(void)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
     b8e:	a1 e3       	ldi	r26, 0x31	; 49
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e1 e3       	ldi	r30, 0x31	; 49
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 62       	ori	r24, 0x20	; 32
     b9a:	8c 93       	st	X, r24

	/* Up_Right_DC_Motor */
	GPIO_setupPinDirection(Up_Right_DC_Motor_IN_PORT_ID,Up_Right_DC_Motor_IN1_PIN_ID,PIN_OUTPUT);
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	41 e0       	ldi	r20, 0x01	; 1
     ba2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>

    /* Up_Left_DC_Motor */
    GPIO_setupPinDirection(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN1_PIN_ID, PIN_OUTPUT);
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	61 e0       	ldi	r22, 0x01	; 1
     bd2:	41 e0       	ldi	r20, 0x01	; 1
     bd4:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>

    /* Down_Right_DC_Motor */
    GPIO_setupPinDirection(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN1_PIN_ID, PIN_OUTPUT);
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	66 e0       	ldi	r22, 0x06	; 6
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	67 e0       	ldi	r22, 0x07	; 7
     bfa:	41 e0       	ldi	r20, 0x01	; 1
     bfc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	66 e0       	ldi	r22, 0x06	; 6
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	67 e0       	ldi	r22, 0x07	; 7
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>

    /* Down_Left_DC_Motor */
    GPIO_setupPinDirection(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN1_PIN_ID, PIN_OUTPUT);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	66 e0       	ldi	r22, 0x06	; 6
     c18:	41 e0       	ldi	r20, 0x01	; 1
     c1a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_setupPinDirection(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN2_PIN_ID, PIN_OUTPUT);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	67 e0       	ldi	r22, 0x07	; 7
     c22:	41 e0       	ldi	r20, 0x01	; 1
     c24:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN1_PIN_ID, LOGIC_LOW);
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	66 e0       	ldi	r22, 0x06	; 6
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN2_PIN_ID, LOGIC_LOW);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	67 e0       	ldi	r22, 0x07	; 7
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
}
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <Up_Right_DC_Motor_Rotate>:

void Up_Right_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	0f 92       	push	r0
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Up_Right_DC_Motor_EN_PORT_ID, Up_Right_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	63 e0       	ldi	r22, 0x03	; 3
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN1_PIN_ID, state >> 1);
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	98 2f       	mov	r25, r24
     c5c:	96 95       	lsr	r25
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	49 2f       	mov	r20, r25
     c64:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Up_Right_DC_Motor_IN_PORT_ID, Up_Right_DC_Motor_IN2_PIN_ID, state & 1);
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	98 2f       	mov	r25, r24
     c6c:	91 70       	andi	r25, 0x01	; 1
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	49 2f       	mov	r20, r25
     c74:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    //Timer1_Fast_PWM_Init(speed_percent);
    //PWM_Timer0_Generate(speed_percent);
}
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <Down_Right_DC_Motor_Rotate>:

void Down_Right_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	0f 92       	push	r0
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Down_Right_DC_Motor_EN_PORT_ID, Down_Right_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	63 e0       	ldi	r22, 0x03	; 3
     c90:	41 e0       	ldi	r20, 0x01	; 1
     c92:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN1_PIN_ID, state >> 1);
     c96:	89 81       	ldd	r24, Y+1	; 0x01
     c98:	98 2f       	mov	r25, r24
     c9a:	96 95       	lsr	r25
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	66 e0       	ldi	r22, 0x06	; 6
     ca0:	49 2f       	mov	r20, r25
     ca2:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Down_Right_DC_Motor_IN_PORT_ID, Down_Right_DC_Motor_IN2_PIN_ID, state & 1);
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	98 2f       	mov	r25, r24
     caa:	91 70       	andi	r25, 0x01	; 1
     cac:	82 e0       	ldi	r24, 0x02	; 2
     cae:	67 e0       	ldi	r22, 0x07	; 7
     cb0:	49 2f       	mov	r20, r25
     cb2:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    //Timer1_Fast_PWM_Init(speed_percent);
    //PWM_Timer0_Generate(speed_percent);
}
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <Up_Left_DC_Motor_Rotate>:

void Up_Left_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	0f 92       	push	r0
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Up_Left_DC_Motor_EN_PORT_ID, Up_Left_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	63 e0       	ldi	r22, 0x03	; 3
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN1_PIN_ID, state >> 1);
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	98 2f       	mov	r25, r24
     cd8:	96 95       	lsr	r25
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	49 2f       	mov	r20, r25
     ce0:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Up_Left_DC_Motor_IN_PORT_ID, Up_Left_DC_Motor_IN2_PIN_ID, state & 1);
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	98 2f       	mov	r25, r24
     ce8:	91 70       	andi	r25, 0x01	; 1
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	49 2f       	mov	r20, r25
     cf0:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    //PWM_Timer0_Generate(speed_percent);
    //Timer1_Fast_PWM_Init(speed_percent);
}
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <Down_Left_DC_Motor_Rotate>:

void Down_Left_DC_Motor_Rotate(DcMotor_State state/*, uint8 speed_percent*/)
{
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	89 83       	std	Y+1, r24	; 0x01
    GPIO_setupPinDirection(Down_Left_DC_Motor_EN_PORT_ID, Down_Left_DC_Motor_EN1_PIN_ID, PIN_OUTPUT);
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	63 e0       	ldi	r22, 0x03	; 3
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN1_PIN_ID, state >> 1);
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	98 2f       	mov	r25, r24
     d16:	96 95       	lsr	r25
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	66 e0       	ldi	r22, 0x06	; 6
     d1c:	49 2f       	mov	r20, r25
     d1e:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    GPIO_writePin(Down_Left_DC_Motor_IN_PORT_ID, Down_Left_DC_Motor_IN2_PIN_ID, state & 1);
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	98 2f       	mov	r25, r24
     d26:	91 70       	andi	r25, 0x01	; 1
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	67 e0       	ldi	r22, 0x07	; 7
     d2c:	49 2f       	mov	r20, r25
     d2e:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    //PWM_Timer0_Generate(speed_percent);
    //Timer1_Fast_PWM_Init(speed_percent);
}
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <main>:
#include "Motor.c"
#include "lcd.h"
#include <util/delay.h> /* for delay function*/

int main()
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
	//uint8 front_Ultrasonic_reading;
	//uint8 right_Ultrasonic_reading;
	//uint8 left_Ultrasonic_reading;
	//uint8 IR_read;
	//IR_Sensor_Init();
	DcMotors_Init();
     d42:	0e 94 c3 05 	call	0xb86	; 0xb86 <DcMotors_Init>
	PWM_Timer2_Generate(80);
     d46:	80 e5       	ldi	r24, 0x50	; 80
     d48:	0e 94 04 16 	call	0x2c08	; 0x2c08 <PWM_Timer2_Generate>
	PWM_Timer0_Generate(80);
     d4c:	80 e5       	ldi	r24, 0x50	; 80
     d4e:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <PWM_Timer0_Generate>
	//IR_Sensor_Init();
	//LCD_displayString("IR ");

	while(1)
	{
		Move_Forward();
     d52:	0e 94 ac 06 	call	0xd58	; 0xd58 <Move_Forward>
     d56:	fd cf       	rjmp	.-6      	; 0xd52 <main+0x18>

00000d58 <Move_Forward>:
	}
}

/*operate all the motors with the same speed and clockwise*/
void Move_Forward(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_CW);
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	0e 94 21 06 	call	0xc42	; 0xc42 <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_CW);
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	0e 94 40 06 	call	0xc80	; 0xc80 <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_CW);
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_CW);
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Down_Left_DC_Motor_Rotate>
}
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <Move_Backward>:

/*operate all the motors with the same speed and anti-clockwise*/
void Move_Backward(void)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_A_CW);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	0e 94 21 06 	call	0xc42	; 0xc42 <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_A_CW);
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	0e 94 40 06 	call	0xc80	; 0xc80 <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_A_CW);
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_A_CW);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Down_Left_DC_Motor_Rotate>
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <Move_Left_Or_Right>:
 * to move right:
 * operate the right motors with the lower speed and clockwise
 * and the left motors with the higher speed and also clockwise
 * */
void Move_Left_Or_Right(void)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_CW);
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	0e 94 21 06 	call	0xc42	; 0xc42 <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_CW);
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	0e 94 40 06 	call	0xc80	; 0xc80 <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_CW);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_CW);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Down_Left_DC_Motor_Rotate>
}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <Move_Left>:

void Move_Left(void)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_CW);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	0e 94 21 06 	call	0xc42	; 0xc42 <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_CW);
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	0e 94 40 06 	call	0xc80	; 0xc80 <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_A_CW);
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_A_CW);
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Down_Left_DC_Motor_Rotate>
}
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <Move_Right>:

void Move_Right(void)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_A_CW);
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	0e 94 21 06 	call	0xc42	; 0xc42 <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_A_CW);
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	0e 94 40 06 	call	0xc80	; 0xc80 <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_CW);
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_CW);
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Down_Left_DC_Motor_Rotate>
}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <Stop>:

/*stop all the motors*/
void Stop(void)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	Up_Right_DC_Motor_Rotate(DcMotor_OFF);
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	0e 94 21 06 	call	0xc42	; 0xc42 <Up_Right_DC_Motor_Rotate>
	Down_Right_DC_Motor_Rotate(DcMotor_OFF);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 40 06 	call	0xc80	; 0xc80 <Down_Right_DC_Motor_Rotate>

	Up_Left_DC_Motor_Rotate(DcMotor_OFF);
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <Up_Left_DC_Motor_Rotate>
	Down_Left_DC_Motor_Rotate(DcMotor_OFF);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 7e 06 	call	0xcfc	; 0xcfc <Down_Left_DC_Motor_Rotate>
}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	00 d0       	rcall	.+0      	; 0xe42 <GPIO_setupPinDirection+0x6>
     e42:	00 d0       	rcall	.+0      	; 0xe44 <GPIO_setupPinDirection+0x8>
     e44:	0f 92       	push	r0
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	6a 83       	std	Y+2, r22	; 0x02
     e4e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	88 30       	cpi	r24, 0x08	; 8
     e54:	08 f0       	brcs	.+2      	; 0xe58 <GPIO_setupPinDirection+0x1c>
     e56:	d5 c0       	rjmp	.+426    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	84 30       	cpi	r24, 0x04	; 4
     e5c:	08 f0       	brcs	.+2      	; 0xe60 <GPIO_setupPinDirection+0x24>
     e5e:	d1 c0       	rjmp	.+418    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3d 83       	std	Y+5, r19	; 0x05
     e68:	2c 83       	std	Y+4, r18	; 0x04
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	9d 81       	ldd	r25, Y+5	; 0x05
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	09 f4       	brne	.+2      	; 0xe76 <GPIO_setupPinDirection+0x3a>
     e74:	43 c0       	rjmp	.+134    	; 0xefc <GPIO_setupPinDirection+0xc0>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	2c f4       	brge	.+10     	; 0xe8a <GPIO_setupPinDirection+0x4e>
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	9d 81       	ldd	r25, Y+5	; 0x05
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	71 f0       	breq	.+28     	; 0xea4 <GPIO_setupPinDirection+0x68>
     e88:	bc c0       	rjmp	.+376    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
     e8a:	2c 81       	ldd	r18, Y+4	; 0x04
     e8c:	3d 81       	ldd	r19, Y+5	; 0x05
     e8e:	22 30       	cpi	r18, 0x02	; 2
     e90:	31 05       	cpc	r19, r1
     e92:	09 f4       	brne	.+2      	; 0xe96 <GPIO_setupPinDirection+0x5a>
     e94:	5f c0       	rjmp	.+190    	; 0xf54 <GPIO_setupPinDirection+0x118>
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	83 30       	cpi	r24, 0x03	; 3
     e9c:	91 05       	cpc	r25, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <GPIO_setupPinDirection+0x66>
     ea0:	85 c0       	rjmp	.+266    	; 0xfac <GPIO_setupPinDirection+0x170>
     ea2:	af c0       	rjmp	.+350    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	a1 f4       	brne	.+40     	; 0xed2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     eaa:	aa e3       	ldi	r26, 0x3A	; 58
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ea e3       	ldi	r30, 0x3A	; 58
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_setupPinDirection+0x8c>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_setupPinDirection+0x88>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	98 c0       	rjmp	.+304    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     ed2:	aa e3       	ldi	r26, 0x3A	; 58
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ea e3       	ldi	r30, 0x3A	; 58
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <GPIO_setupPinDirection+0xb4>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <GPIO_setupPinDirection+0xb0>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	83 c0       	rjmp	.+262    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	a1 f4       	brne	.+40     	; 0xf2a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     f02:	a7 e3       	ldi	r26, 0x37	; 55
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e7 e3       	ldi	r30, 0x37	; 55
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <GPIO_setupPinDirection+0xe4>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <GPIO_setupPinDirection+0xe0>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	6c c0       	rjmp	.+216    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     f2a:	a7 e3       	ldi	r26, 0x37	; 55
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e7 e3       	ldi	r30, 0x37	; 55
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <GPIO_setupPinDirection+0x10c>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <GPIO_setupPinDirection+0x108>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	57 c0       	rjmp	.+174    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	a1 f4       	brne	.+40     	; 0xf82 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     f5a:	a4 e3       	ldi	r26, 0x34	; 52
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e4 e3       	ldi	r30, 0x34	; 52
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <GPIO_setupPinDirection+0x13c>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <GPIO_setupPinDirection+0x138>
     f7c:	84 2b       	or	r24, r20
     f7e:	8c 93       	st	X, r24
     f80:	40 c0       	rjmp	.+128    	; 0x1002 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     f82:	a4 e3       	ldi	r26, 0x34	; 52
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e4 e3       	ldi	r30, 0x34	; 52
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	8a 81       	ldd	r24, Y+2	; 0x02
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 2e       	mov	r0, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_setupPinDirection+0x164>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	0a 94       	dec	r0
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_setupPinDirection+0x160>
     fa4:	80 95       	com	r24
     fa6:	84 23       	and	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	2b c0       	rjmp	.+86     	; 0x1002 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	a1 f4       	brne	.+40     	; 0xfda <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     fb2:	a1 e3       	ldi	r26, 0x31	; 49
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e1 e3       	ldi	r30, 0x31	; 49
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_setupPinDirection+0x194>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_setupPinDirection+0x190>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     fda:	a1 e3       	ldi	r26, 0x31	; 49
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e1 e3       	ldi	r30, 0x31	; 49
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <GPIO_setupPinDirection+0x1bc>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <GPIO_setupPinDirection+0x1b8>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <GPIO_writePin+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <GPIO_writePin+0x8>
    101a:	0f 92       	push	r0
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	6a 83       	std	Y+2, r22	; 0x02
    1024:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	08 f0       	brcs	.+2      	; 0x102e <GPIO_writePin+0x1c>
    102c:	d5 c0       	rjmp	.+426    	; 0x11d8 <GPIO_writePin+0x1c6>
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	84 30       	cpi	r24, 0x04	; 4
    1032:	08 f0       	brcs	.+2      	; 0x1036 <GPIO_writePin+0x24>
    1034:	d1 c0       	rjmp	.+418    	; 0x11d8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	3d 83       	std	Y+5, r19	; 0x05
    103e:	2c 83       	std	Y+4, r18	; 0x04
    1040:	8c 81       	ldd	r24, Y+4	; 0x04
    1042:	9d 81       	ldd	r25, Y+5	; 0x05
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <GPIO_writePin+0x3a>
    104a:	43 c0       	rjmp	.+134    	; 0x10d2 <GPIO_writePin+0xc0>
    104c:	2c 81       	ldd	r18, Y+4	; 0x04
    104e:	3d 81       	ldd	r19, Y+5	; 0x05
    1050:	22 30       	cpi	r18, 0x02	; 2
    1052:	31 05       	cpc	r19, r1
    1054:	2c f4       	brge	.+10     	; 0x1060 <GPIO_writePin+0x4e>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	71 f0       	breq	.+28     	; 0x107a <GPIO_writePin+0x68>
    105e:	bc c0       	rjmp	.+376    	; 0x11d8 <GPIO_writePin+0x1c6>
    1060:	2c 81       	ldd	r18, Y+4	; 0x04
    1062:	3d 81       	ldd	r19, Y+5	; 0x05
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	09 f4       	brne	.+2      	; 0x106c <GPIO_writePin+0x5a>
    106a:	5f c0       	rjmp	.+190    	; 0x112a <GPIO_writePin+0x118>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	83 30       	cpi	r24, 0x03	; 3
    1072:	91 05       	cpc	r25, r1
    1074:	09 f4       	brne	.+2      	; 0x1078 <GPIO_writePin+0x66>
    1076:	85 c0       	rjmp	.+266    	; 0x1182 <GPIO_writePin+0x170>
    1078:	af c0       	rjmp	.+350    	; 0x11d8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	a1 f4       	brne	.+40     	; 0x10a8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1080:	ab e3       	ldi	r26, 0x3B	; 59
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	eb e3       	ldi	r30, 0x3B	; 59
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <GPIO_writePin+0x8c>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <GPIO_writePin+0x88>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	98 c0       	rjmp	.+304    	; 0x11d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    10a8:	ab e3       	ldi	r26, 0x3B	; 59
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	eb e3       	ldi	r30, 0x3B	; 59
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <GPIO_writePin+0xb4>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <GPIO_writePin+0xb0>
    10ca:	80 95       	com	r24
    10cc:	84 23       	and	r24, r20
    10ce:	8c 93       	st	X, r24
    10d0:	83 c0       	rjmp	.+262    	; 0x11d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	a1 f4       	brne	.+40     	; 0x1100 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    10d8:	a8 e3       	ldi	r26, 0x38	; 56
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e8 e3       	ldi	r30, 0x38	; 56
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_writePin+0xe4>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_writePin+0xe0>
    10fa:	84 2b       	or	r24, r20
    10fc:	8c 93       	st	X, r24
    10fe:	6c c0       	rjmp	.+216    	; 0x11d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1100:	a8 e3       	ldi	r26, 0x38	; 56
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e8 e3       	ldi	r30, 0x38	; 56
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	48 2f       	mov	r20, r24
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 2e       	mov	r0, r18
    1118:	02 c0       	rjmp	.+4      	; 0x111e <GPIO_writePin+0x10c>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <GPIO_writePin+0x108>
    1122:	80 95       	com	r24
    1124:	84 23       	and	r24, r20
    1126:	8c 93       	st	X, r24
    1128:	57 c0       	rjmp	.+174    	; 0x11d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	81 30       	cpi	r24, 0x01	; 1
    112e:	a1 f4       	brne	.+40     	; 0x1158 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1130:	a5 e3       	ldi	r26, 0x35	; 53
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e5 e3       	ldi	r30, 0x35	; 53
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_writePin+0x13c>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_writePin+0x138>
    1152:	84 2b       	or	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	40 c0       	rjmp	.+128    	; 0x11d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1158:	a5 e3       	ldi	r26, 0x35	; 53
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e3       	ldi	r30, 0x35	; 53
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <GPIO_writePin+0x164>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <GPIO_writePin+0x160>
    117a:	80 95       	com	r24
    117c:	84 23       	and	r24, r20
    117e:	8c 93       	st	X, r24
    1180:	2b c0       	rjmp	.+86     	; 0x11d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	a1 f4       	brne	.+40     	; 0x11b0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1188:	a2 e3       	ldi	r26, 0x32	; 50
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_writePin+0x194>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_writePin+0x190>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	14 c0       	rjmp	.+40     	; 0x11d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    11b0:	a2 e3       	ldi	r26, 0x32	; 50
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e2 e3       	ldi	r30, 0x32	; 50
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	48 2f       	mov	r20, r24
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 2e       	mov	r0, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <GPIO_writePin+0x1bc>
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	0a 94       	dec	r0
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <GPIO_writePin+0x1b8>
    11d2:	80 95       	com	r24
    11d4:	84 23       	and	r24, r20
    11d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <GPIO_readPin+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <GPIO_readPin+0x8>
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	8a 83       	std	Y+2, r24	; 0x02
    11f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    11fa:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	08 f0       	brcs	.+2      	; 0x1204 <GPIO_readPin+0x1c>
    1202:	84 c0       	rjmp	.+264    	; 0x130c <GPIO_readPin+0x124>
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	08 f0       	brcs	.+2      	; 0x120c <GPIO_readPin+0x24>
    120a:	80 c0       	rjmp	.+256    	; 0x130c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3d 83       	std	Y+5, r19	; 0x05
    1214:	2c 83       	std	Y+4, r18	; 0x04
    1216:	4c 81       	ldd	r20, Y+4	; 0x04
    1218:	5d 81       	ldd	r21, Y+5	; 0x05
    121a:	41 30       	cpi	r20, 0x01	; 1
    121c:	51 05       	cpc	r21, r1
    121e:	79 f1       	breq	.+94     	; 0x127e <GPIO_readPin+0x96>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	34 f4       	brge	.+12     	; 0x1236 <GPIO_readPin+0x4e>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	21 15       	cp	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	69 f0       	breq	.+26     	; 0x124e <GPIO_readPin+0x66>
    1234:	6b c0       	rjmp	.+214    	; 0x130c <GPIO_readPin+0x124>
    1236:	4c 81       	ldd	r20, Y+4	; 0x04
    1238:	5d 81       	ldd	r21, Y+5	; 0x05
    123a:	42 30       	cpi	r20, 0x02	; 2
    123c:	51 05       	cpc	r21, r1
    123e:	b9 f1       	breq	.+110    	; 0x12ae <GPIO_readPin+0xc6>
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <GPIO_readPin+0x64>
    124a:	49 c0       	rjmp	.+146    	; 0x12de <GPIO_readPin+0xf6>
    124c:	5f c0       	rjmp	.+190    	; 0x130c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    124e:	e9 e3       	ldi	r30, 0x39	; 57
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	a9 01       	movw	r20, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_readPin+0x7e>
    1262:	55 95       	asr	r21
    1264:	47 95       	ror	r20
    1266:	8a 95       	dec	r24
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_readPin+0x7a>
    126a:	ca 01       	movw	r24, r20
    126c:	81 70       	andi	r24, 0x01	; 1
    126e:	90 70       	andi	r25, 0x00	; 0
    1270:	88 23       	and	r24, r24
    1272:	19 f0       	breq	.+6      	; 0x127a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	49 c0       	rjmp	.+146    	; 0x130c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    127a:	19 82       	std	Y+1, r1	; 0x01
    127c:	47 c0       	rjmp	.+142    	; 0x130c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    127e:	e6 e3       	ldi	r30, 0x36	; 54
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_readPin+0xae>
    1292:	55 95       	asr	r21
    1294:	47 95       	ror	r20
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_readPin+0xaa>
    129a:	ca 01       	movw	r24, r20
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	90 70       	andi	r25, 0x00	; 0
    12a0:	88 23       	and	r24, r24
    12a2:	19 f0       	breq	.+6      	; 0x12aa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	31 c0       	rjmp	.+98     	; 0x130c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12aa:	19 82       	std	Y+1, r1	; 0x01
    12ac:	2f c0       	rjmp	.+94     	; 0x130c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    12ae:	e3 e3       	ldi	r30, 0x33	; 51
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <GPIO_readPin+0xde>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <GPIO_readPin+0xda>
    12ca:	ca 01       	movw	r24, r20
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	90 70       	andi	r25, 0x00	; 0
    12d0:	88 23       	and	r24, r24
    12d2:	19 f0       	breq	.+6      	; 0x12da <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	19 c0       	rjmp	.+50     	; 0x130c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	17 c0       	rjmp	.+46     	; 0x130c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    12de:	e0 e3       	ldi	r30, 0x30	; 48
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a9 01       	movw	r20, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <GPIO_readPin+0x10e>
    12f2:	55 95       	asr	r21
    12f4:	47 95       	ror	r20
    12f6:	8a 95       	dec	r24
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <GPIO_readPin+0x10a>
    12fa:	ca 01       	movw	r24, r20
    12fc:	81 70       	andi	r24, 0x01	; 1
    12fe:	90 70       	andi	r25, 0x00	; 0
    1300:	88 23       	and	r24, r24
    1302:	19 f0       	breq	.+6      	; 0x130a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	01 c0       	rjmp	.+2      	; 0x130c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    130a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    130c:	89 81       	ldd	r24, Y+1	; 0x01
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <GPIO_setupPortDirection+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <GPIO_setupPortDirection+0x8>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	90 f5       	brcc	.+100    	; 0x1398 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	3c 83       	std	Y+4, r19	; 0x04
    133c:	2b 83       	std	Y+3, r18	; 0x03
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	d1 f0       	breq	.+52     	; 0x137c <GPIO_setupPortDirection+0x5e>
    1348:	2b 81       	ldd	r18, Y+3	; 0x03
    134a:	3c 81       	ldd	r19, Y+4	; 0x04
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	2c f4       	brge	.+10     	; 0x135c <GPIO_setupPortDirection+0x3e>
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	61 f0       	breq	.+24     	; 0x1372 <GPIO_setupPortDirection+0x54>
    135a:	1e c0       	rjmp	.+60     	; 0x1398 <GPIO_setupPortDirection+0x7a>
    135c:	2b 81       	ldd	r18, Y+3	; 0x03
    135e:	3c 81       	ldd	r19, Y+4	; 0x04
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	81 f0       	breq	.+32     	; 0x1386 <GPIO_setupPortDirection+0x68>
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	83 30       	cpi	r24, 0x03	; 3
    136c:	91 05       	cpc	r25, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <GPIO_setupPortDirection+0x72>
    1370:	13 c0       	rjmp	.+38     	; 0x1398 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1372:	ea e3       	ldi	r30, 0x3A	; 58
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	80 83       	st	Z, r24
    137a:	0e c0       	rjmp	.+28     	; 0x1398 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    137c:	e7 e3       	ldi	r30, 0x37	; 55
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	80 83       	st	Z, r24
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1386:	e4 e3       	ldi	r30, 0x34	; 52
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	80 83       	st	Z, r24
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1390:	e1 e3       	ldi	r30, 0x31	; 49
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	80 83       	st	Z, r24
			break;
		}
	}
}
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <GPIO_writePort+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <GPIO_writePort+0x8>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	84 30       	cpi	r24, 0x04	; 4
    13ba:	90 f5       	brcc	.+100    	; 0x1420 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	3c 83       	std	Y+4, r19	; 0x04
    13c4:	2b 83       	std	Y+3, r18	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	91 05       	cpc	r25, r1
    13ce:	d1 f0       	breq	.+52     	; 0x1404 <GPIO_writePort+0x5e>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	2c f4       	brge	.+10     	; 0x13e4 <GPIO_writePort+0x3e>
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	61 f0       	breq	.+24     	; 0x13fa <GPIO_writePort+0x54>
    13e2:	1e c0       	rjmp	.+60     	; 0x1420 <GPIO_writePort+0x7a>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	22 30       	cpi	r18, 0x02	; 2
    13ea:	31 05       	cpc	r19, r1
    13ec:	81 f0       	breq	.+32     	; 0x140e <GPIO_writePort+0x68>
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	83 30       	cpi	r24, 0x03	; 3
    13f4:	91 05       	cpc	r25, r1
    13f6:	81 f0       	breq	.+32     	; 0x1418 <GPIO_writePort+0x72>
    13f8:	13 c0       	rjmp	.+38     	; 0x1420 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    13fa:	eb e3       	ldi	r30, 0x3B	; 59
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	80 83       	st	Z, r24
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1404:	e8 e3       	ldi	r30, 0x38	; 56
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	80 83       	st	Z, r24
    140c:	09 c0       	rjmp	.+18     	; 0x1420 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    140e:	e5 e3       	ldi	r30, 0x35	; 53
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	80 83       	st	Z, r24
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1418:	e2 e3       	ldi	r30, 0x32	; 50
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <GPIO_readPort+0x6>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <GPIO_readPort+0x8>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    143c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	90 f5       	brcc	.+100    	; 0x14a8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3c 83       	std	Y+4, r19	; 0x04
    144c:	2b 83       	std	Y+3, r18	; 0x03
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	d1 f0       	breq	.+52     	; 0x148c <GPIO_readPort+0x5e>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	2c f4       	brge	.+10     	; 0x146c <GPIO_readPort+0x3e>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	61 f0       	breq	.+24     	; 0x1482 <GPIO_readPort+0x54>
    146a:	1e c0       	rjmp	.+60     	; 0x14a8 <GPIO_readPort+0x7a>
    146c:	2b 81       	ldd	r18, Y+3	; 0x03
    146e:	3c 81       	ldd	r19, Y+4	; 0x04
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <GPIO_readPort+0x68>
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <GPIO_readPort+0x72>
    1480:	13 c0       	rjmp	.+38     	; 0x14a8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1482:	e9 e3       	ldi	r30, 0x39	; 57
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	0e c0       	rjmp	.+28     	; 0x14a8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    148c:	e6 e3       	ldi	r30, 0x36	; 54
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1496:	e3 e3       	ldi	r30, 0x33	; 51
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    14a0:	e0 e3       	ldi	r30, 0x30	; 48
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    14b8:	1f 92       	push	r1
    14ba:	0f 92       	push	r0
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	0f 92       	push	r0
    14c0:	11 24       	eor	r1, r1
    14c2:	2f 93       	push	r18
    14c4:	3f 93       	push	r19
    14c6:	4f 93       	push	r20
    14c8:	5f 93       	push	r21
    14ca:	6f 93       	push	r22
    14cc:	7f 93       	push	r23
    14ce:	8f 93       	push	r24
    14d0:	9f 93       	push	r25
    14d2:	af 93       	push	r26
    14d4:	bf 93       	push	r27
    14d6:	ef 93       	push	r30
    14d8:	ff 93       	push	r31
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14e2:	80 91 68 00 	lds	r24, 0x0068
    14e6:	90 91 69 00 	lds	r25, 0x0069
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14ee:	e0 91 68 00 	lds	r30, 0x0068
    14f2:	f0 91 69 00 	lds	r31, 0x0069
    14f6:	09 95       	icall
	}
}
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
    1500:	bf 91       	pop	r27
    1502:	af 91       	pop	r26
    1504:	9f 91       	pop	r25
    1506:	8f 91       	pop	r24
    1508:	7f 91       	pop	r23
    150a:	6f 91       	pop	r22
    150c:	5f 91       	pop	r21
    150e:	4f 91       	pop	r20
    1510:	3f 91       	pop	r19
    1512:	2f 91       	pop	r18
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	0f 90       	pop	r0
    151a:	1f 90       	pop	r1
    151c:	18 95       	reti

0000151e <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <ICU_init+0x6>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	GPIO_setupPinDirection(PORTD_ID,PIN6_ID,PIN_INPUT);
    152c:	83 e0       	ldi	r24, 0x03	; 3
    152e:	66 e0       	ldi	r22, 0x06	; 6
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1536:	ef e4       	ldi	r30, 0x4F	; 79
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8c e0       	ldi	r24, 0x0C	; 12
    153c:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    153e:	ae e4       	ldi	r26, 0x4E	; 78
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ee e4       	ldi	r30, 0x4E	; 78
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	98 2f       	mov	r25, r24
    154a:	98 7f       	andi	r25, 0xF8	; 248
    154c:	e9 81       	ldd	r30, Y+1	; 0x01
    154e:	fa 81       	ldd	r31, Y+2	; 0x02
    1550:	80 81       	ld	r24, Z
    1552:	89 2b       	or	r24, r25
    1554:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1556:	ae e4       	ldi	r26, 0x4E	; 78
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	28 2f       	mov	r18, r24
    1562:	2f 7b       	andi	r18, 0xBF	; 191
    1564:	e9 81       	ldd	r30, Y+1	; 0x01
    1566:	fa 81       	ldd	r31, Y+2	; 0x02
    1568:	81 81       	ldd	r24, Z+1	; 0x01
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	00 24       	eor	r0, r0
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	07 94       	ror	r0
    1576:	96 95       	lsr	r25
    1578:	87 95       	ror	r24
    157a:	07 94       	ror	r0
    157c:	98 2f       	mov	r25, r24
    157e:	80 2d       	mov	r24, r0
    1580:	82 2b       	or	r24, r18
    1582:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1584:	ec e4       	ldi	r30, 0x4C	; 76
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	11 82       	std	Z+1, r1	; 0x01
    158a:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    158c:	e6 e4       	ldi	r30, 0x46	; 70
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	11 82       	std	Z+1, r1	; 0x01
    1592:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1594:	a9 e5       	ldi	r26, 0x59	; 89
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e9 e5       	ldi	r30, 0x59	; 89
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	80 62       	ori	r24, 0x20	; 32
    15a0:	8c 93       	st	X, r24
}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <ICU_setCallBack+0x6>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	9a 83       	std	Y+2, r25	; 0x02
    15b8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	9a 81       	ldd	r25, Y+2	; 0x02
    15be:	90 93 69 00 	sts	0x0069, r25
    15c2:	80 93 68 00 	sts	0x0068, r24
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	0f 92       	push	r0
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
    15da:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    15dc:	ae e4       	ldi	r26, 0x4E	; 78
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ee e4       	ldi	r30, 0x4E	; 78
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	28 2f       	mov	r18, r24
    15e8:	2f 7b       	andi	r18, 0xBF	; 191
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	00 24       	eor	r0, r0
    15f2:	96 95       	lsr	r25
    15f4:	87 95       	ror	r24
    15f6:	07 94       	ror	r0
    15f8:	96 95       	lsr	r25
    15fa:	87 95       	ror	r24
    15fc:	07 94       	ror	r0
    15fe:	98 2f       	mov	r25, r24
    1600:	80 2d       	mov	r24, r0
    1602:	82 2b       	or	r24, r18
    1604:	8c 93       	st	X, r24
}
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1616:	e6 e4       	ldi	r30, 0x46	; 70
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
}
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    162c:	ec e4       	ldi	r30, 0x4C	; 76
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	11 82       	std	Z+1, r1	; 0x01
    1632:	10 82       	st	Z, r1
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1642:	ef e4       	ldi	r30, 0x4F	; 79
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	10 82       	st	Z, r1
	TCCR1B = 0;
    1648:	ee e4       	ldi	r30, 0x4E	; 78
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	10 82       	st	Z, r1
	TCNT1 = 0;
    164e:	ec e4       	ldi	r30, 0x4C	; 76
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	11 82       	std	Z+1, r1	; 0x01
    1654:	10 82       	st	Z, r1
	ICR1 = 0;
    1656:	e6 e4       	ldi	r30, 0x46	; 70
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	11 82       	std	Z+1, r1	; 0x01
    165c:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    165e:	a9 e5       	ldi	r26, 0x59	; 89
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e9 e5       	ldi	r30, 0x59	; 89
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8f 7d       	andi	r24, 0xDF	; 223
    166a:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    166c:	10 92 69 00 	sts	0x0069, r1
    1670:	10 92 68 00 	sts	0x0068, r1
}
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	2e 97       	sbiw	r28, 0x0e	; 14
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	61 e0       	ldi	r22, 0x01	; 1
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 ea       	ldi	r26, 0xA0	; 160
    16a8:	b1 e4       	ldi	r27, 0x41	; 65
    16aa:	8b 87       	std	Y+11, r24	; 0x0b
    16ac:	9c 87       	std	Y+12, r25	; 0x0c
    16ae:	ad 87       	std	Y+13, r26	; 0x0d
    16b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a e7       	ldi	r20, 0x7A	; 122
    16c0:	55 e4       	ldi	r21, 0x45	; 69
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	8f 83       	std	Y+7, r24	; 0x07
    16cc:	98 87       	std	Y+8, r25	; 0x08
    16ce:	a9 87       	std	Y+9, r26	; 0x09
    16d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d2:	6f 81       	ldd	r22, Y+7	; 0x07
    16d4:	78 85       	ldd	r23, Y+8	; 0x08
    16d6:	89 85       	ldd	r24, Y+9	; 0x09
    16d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e8       	ldi	r20, 0x80	; 128
    16e0:	5f e3       	ldi	r21, 0x3F	; 63
    16e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e6:	88 23       	and	r24, r24
    16e8:	2c f4       	brge	.+10     	; 0x16f4 <LCD_init+0x7a>
		__ticks = 1;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9e 83       	std	Y+6, r25	; 0x06
    16f0:	8d 83       	std	Y+5, r24	; 0x05
    16f2:	3f c0       	rjmp	.+126    	; 0x1772 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16f4:	6f 81       	ldd	r22, Y+7	; 0x07
    16f6:	78 85       	ldd	r23, Y+8	; 0x08
    16f8:	89 85       	ldd	r24, Y+9	; 0x09
    16fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	3f ef       	ldi	r19, 0xFF	; 255
    1700:	4f e7       	ldi	r20, 0x7F	; 127
    1702:	57 e4       	ldi	r21, 0x47	; 71
    1704:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1708:	18 16       	cp	r1, r24
    170a:	4c f5       	brge	.+82     	; 0x175e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170c:	6b 85       	ldd	r22, Y+11	; 0x0b
    170e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1710:	8d 85       	ldd	r24, Y+13	; 0x0d
    1712:	9e 85       	ldd	r25, Y+14	; 0x0e
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e2       	ldi	r20, 0x20	; 32
    171a:	51 e4       	ldi	r21, 0x41	; 65
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <LCD_init+0xda>
    1736:	80 e9       	ldi	r24, 0x90	; 144
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	9c 83       	std	Y+4, r25	; 0x04
    173c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	9c 81       	ldd	r25, Y+4	; 0x04
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_init+0xc8>
    1746:	9c 83       	std	Y+4, r25	; 0x04
    1748:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	69 f7       	brne	.-38     	; 0x1736 <LCD_init+0xbc>
    175c:	14 c0       	rjmp	.+40     	; 0x1786 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	9e 83       	std	Y+6, r25	; 0x06
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <LCD_init+0x104>
    1782:	9a 83       	std	Y+2, r25	; 0x02
    1784:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	63 e0       	ldi	r22, 0x03	; 3
    178a:	41 e0       	ldi	r20, 0x01	; 1
    178c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	64 e0       	ldi	r22, 0x04	; 4
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    179a:	80 e0       	ldi	r24, 0x00	; 0
    179c:	65 e0       	ldi	r22, 0x05	; 5
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	66 e0       	ldi	r22, 0x06	; 6
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    17ae:	83 e3       	ldi	r24, 0x33	; 51
    17b0:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17b4:	82 e3       	ldi	r24, 0x32	; 50
    17b6:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    17ba:	88 e2       	ldi	r24, 0x28	; 40
    17bc:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    17c0:	8c e0       	ldi	r24, 0x0C	; 12
    17c2:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>
}
    17cc:	2e 96       	adiw	r28, 0x0e	; 14
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	c3 56       	subi	r28, 0x63	; 99
    17ec:	d0 40       	sbci	r29, 0x00	; 0
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	fe 01       	movw	r30, r28
    17fa:	ed 59       	subi	r30, 0x9D	; 157
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    180a:	fe 01       	movw	r30, r28
    180c:	e1 5a       	subi	r30, 0xA1	; 161
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	80 e0       	ldi	r24, 0x00	; 0
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e8       	ldi	r26, 0x80	; 128
    1816:	bf e3       	ldi	r27, 0x3F	; 63
    1818:	80 83       	st	Z, r24
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	a2 83       	std	Z+2, r26	; 0x02
    181e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1820:	8e 01       	movw	r16, r28
    1822:	05 5a       	subi	r16, 0xA5	; 165
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	fe 01       	movw	r30, r28
    1828:	e1 5a       	subi	r30, 0xA1	; 161
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	4a e7       	ldi	r20, 0x7A	; 122
    183a:	55 e4       	ldi	r21, 0x45	; 69
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	f8 01       	movw	r30, r16
    1846:	80 83       	st	Z, r24
    1848:	91 83       	std	Z+1, r25	; 0x01
    184a:	a2 83       	std	Z+2, r26	; 0x02
    184c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    184e:	fe 01       	movw	r30, r28
    1850:	e5 5a       	subi	r30, 0xA5	; 165
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e8       	ldi	r20, 0x80	; 128
    1862:	5f e3       	ldi	r21, 0x3F	; 63
    1864:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1868:	88 23       	and	r24, r24
    186a:	44 f4       	brge	.+16     	; 0x187c <LCD_sendCommand+0x9e>
		__ticks = 1;
    186c:	fe 01       	movw	r30, r28
    186e:	e7 5a       	subi	r30, 0xA7	; 167
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	91 83       	std	Z+1, r25	; 0x01
    1878:	80 83       	st	Z, r24
    187a:	64 c0       	rjmp	.+200    	; 0x1944 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    187c:	fe 01       	movw	r30, r28
    187e:	e5 5a       	subi	r30, 0xA5	; 165
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	3f ef       	ldi	r19, 0xFF	; 255
    188e:	4f e7       	ldi	r20, 0x7F	; 127
    1890:	57 e4       	ldi	r21, 0x47	; 71
    1892:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1896:	18 16       	cp	r1, r24
    1898:	0c f0       	brlt	.+2      	; 0x189c <LCD_sendCommand+0xbe>
    189a:	43 c0       	rjmp	.+134    	; 0x1922 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189c:	fe 01       	movw	r30, r28
    189e:	e1 5a       	subi	r30, 0xA1	; 161
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	40 e2       	ldi	r20, 0x20	; 32
    18b0:	51 e4       	ldi	r21, 0x41	; 65
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8e 01       	movw	r16, r28
    18bc:	07 5a       	subi	r16, 0xA7	; 167
    18be:	1f 4f       	sbci	r17, 0xFF	; 255
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	f8 01       	movw	r30, r16
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	1f c0       	rjmp	.+62     	; 0x1912 <LCD_sendCommand+0x134>
    18d4:	fe 01       	movw	r30, r28
    18d6:	e9 5a       	subi	r30, 0xA9	; 169
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 e9       	ldi	r24, 0x90	; 144
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	80 83       	st	Z, r24
    18e2:	fe 01       	movw	r30, r28
    18e4:	e9 5a       	subi	r30, 0xA9	; 169
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	80 81       	ld	r24, Z
    18ea:	91 81       	ldd	r25, Z+1	; 0x01
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	f1 f7       	brne	.-4      	; 0x18ec <LCD_sendCommand+0x10e>
    18f0:	fe 01       	movw	r30, r28
    18f2:	e9 5a       	subi	r30, 0xA9	; 169
    18f4:	ff 4f       	sbci	r31, 0xFF	; 255
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fa:	de 01       	movw	r26, r28
    18fc:	a7 5a       	subi	r26, 0xA7	; 167
    18fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1900:	fe 01       	movw	r30, r28
    1902:	e7 5a       	subi	r30, 0xA7	; 167
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	11 96       	adiw	r26, 0x01	; 1
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	fe 01       	movw	r30, r28
    1914:	e7 5a       	subi	r30, 0xA7	; 167
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	91 81       	ldd	r25, Z+1	; 0x01
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	d1 f6       	brne	.-76     	; 0x18d4 <LCD_sendCommand+0xf6>
    1920:	27 c0       	rjmp	.+78     	; 0x1970 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1922:	8e 01       	movw	r16, r28
    1924:	07 5a       	subi	r16, 0xA7	; 167
    1926:	1f 4f       	sbci	r17, 0xFF	; 255
    1928:	fe 01       	movw	r30, r28
    192a:	e5 5a       	subi	r30, 0xA5	; 165
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	60 81       	ld	r22, Z
    1930:	71 81       	ldd	r23, Z+1	; 0x01
    1932:	82 81       	ldd	r24, Z+2	; 0x02
    1934:	93 81       	ldd	r25, Z+3	; 0x03
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f8 01       	movw	r30, r16
    1940:	91 83       	std	Z+1, r25	; 0x01
    1942:	80 83       	st	Z, r24
    1944:	de 01       	movw	r26, r28
    1946:	ab 5a       	subi	r26, 0xAB	; 171
    1948:	bf 4f       	sbci	r27, 0xFF	; 255
    194a:	fe 01       	movw	r30, r28
    194c:	e7 5a       	subi	r30, 0xA7	; 167
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	91 81       	ldd	r25, Z+1	; 0x01
    1954:	8d 93       	st	X+, r24
    1956:	9c 93       	st	X, r25
    1958:	fe 01       	movw	r30, r28
    195a:	eb 5a       	subi	r30, 0xAB	; 171
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_sendCommand+0x184>
    1966:	fe 01       	movw	r30, r28
    1968:	eb 5a       	subi	r30, 0xAB	; 171
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	62 e0       	ldi	r22, 0x02	; 2
    1974:	41 e0       	ldi	r20, 0x01	; 1
    1976:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    197a:	fe 01       	movw	r30, r28
    197c:	ef 5a       	subi	r30, 0xAF	; 175
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e8       	ldi	r26, 0x80	; 128
    1986:	bf e3       	ldi	r27, 0x3F	; 63
    1988:	80 83       	st	Z, r24
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	a2 83       	std	Z+2, r26	; 0x02
    198e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	8e 01       	movw	r16, r28
    1992:	03 5b       	subi	r16, 0xB3	; 179
    1994:	1f 4f       	sbci	r17, 0xFF	; 255
    1996:	fe 01       	movw	r30, r28
    1998:	ef 5a       	subi	r30, 0xAF	; 175
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	4a e7       	ldi	r20, 0x7A	; 122
    19aa:	55 e4       	ldi	r21, 0x45	; 69
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	f8 01       	movw	r30, r16
    19b6:	80 83       	st	Z, r24
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	a2 83       	std	Z+2, r26	; 0x02
    19bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19be:	fe 01       	movw	r30, r28
    19c0:	e3 5b       	subi	r30, 0xB3	; 179
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e8       	ldi	r20, 0x80	; 128
    19d2:	5f e3       	ldi	r21, 0x3F	; 63
    19d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d8:	88 23       	and	r24, r24
    19da:	44 f4       	brge	.+16     	; 0x19ec <LCD_sendCommand+0x20e>
		__ticks = 1;
    19dc:	fe 01       	movw	r30, r28
    19de:	e5 5b       	subi	r30, 0xB5	; 181
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	80 83       	st	Z, r24
    19ea:	64 c0       	rjmp	.+200    	; 0x1ab4 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    19ec:	fe 01       	movw	r30, r28
    19ee:	e3 5b       	subi	r30, 0xB3	; 179
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	3f ef       	ldi	r19, 0xFF	; 255
    19fe:	4f e7       	ldi	r20, 0x7F	; 127
    1a00:	57 e4       	ldi	r21, 0x47	; 71
    1a02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a06:	18 16       	cp	r1, r24
    1a08:	0c f0       	brlt	.+2      	; 0x1a0c <LCD_sendCommand+0x22e>
    1a0a:	43 c0       	rjmp	.+134    	; 0x1a92 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ef 5a       	subi	r30, 0xAF	; 175
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e2       	ldi	r20, 0x20	; 32
    1a20:	51 e4       	ldi	r21, 0x41	; 65
    1a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	8e 01       	movw	r16, r28
    1a2c:	05 5b       	subi	r16, 0xB5	; 181
    1a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a30:	bc 01       	movw	r22, r24
    1a32:	cd 01       	movw	r24, r26
    1a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
    1a42:	1f c0       	rjmp	.+62     	; 0x1a82 <LCD_sendCommand+0x2a4>
    1a44:	fe 01       	movw	r30, r28
    1a46:	e7 5b       	subi	r30, 0xB7	; 183
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	80 e9       	ldi	r24, 0x90	; 144
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
    1a52:	fe 01       	movw	r30, r28
    1a54:	e7 5b       	subi	r30, 0xB7	; 183
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	80 81       	ld	r24, Z
    1a5a:	91 81       	ldd	r25, Z+1	; 0x01
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <LCD_sendCommand+0x27e>
    1a60:	fe 01       	movw	r30, r28
    1a62:	e7 5b       	subi	r30, 0xB7	; 183
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6a:	de 01       	movw	r26, r28
    1a6c:	a5 5b       	subi	r26, 0xB5	; 181
    1a6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1a70:	fe 01       	movw	r30, r28
    1a72:	e5 5b       	subi	r30, 0xB5	; 181
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 81       	ld	r24, Z
    1a78:	91 81       	ldd	r25, Z+1	; 0x01
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	11 96       	adiw	r26, 0x01	; 1
    1a7e:	9c 93       	st	X, r25
    1a80:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a82:	fe 01       	movw	r30, r28
    1a84:	e5 5b       	subi	r30, 0xB5	; 181
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 81       	ld	r24, Z
    1a8a:	91 81       	ldd	r25, Z+1	; 0x01
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	d1 f6       	brne	.-76     	; 0x1a44 <LCD_sendCommand+0x266>
    1a90:	27 c0       	rjmp	.+78     	; 0x1ae0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a92:	8e 01       	movw	r16, r28
    1a94:	05 5b       	subi	r16, 0xB5	; 181
    1a96:	1f 4f       	sbci	r17, 0xFF	; 255
    1a98:	fe 01       	movw	r30, r28
    1a9a:	e3 5b       	subi	r30, 0xB3	; 179
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	f8 01       	movw	r30, r16
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	de 01       	movw	r26, r28
    1ab6:	a9 5b       	subi	r26, 0xB9	; 185
    1ab8:	bf 4f       	sbci	r27, 0xFF	; 255
    1aba:	fe 01       	movw	r30, r28
    1abc:	e5 5b       	subi	r30, 0xB5	; 181
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	8d 93       	st	X+, r24
    1ac6:	9c 93       	st	X, r25
    1ac8:	fe 01       	movw	r30, r28
    1aca:	e9 5b       	subi	r30, 0xB9	; 185
    1acc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ace:	80 81       	ld	r24, Z
    1ad0:	91 81       	ldd	r25, Z+1	; 0x01
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_sendCommand+0x2f4>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e9 5b       	subi	r30, 0xB9	; 185
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ed 59       	subi	r30, 0x9D	; 157
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	80 81       	ld	r24, Z
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	80 71       	andi	r24, 0x10	; 16
    1aee:	90 70       	andi	r25, 0x00	; 0
    1af0:	95 95       	asr	r25
    1af2:	87 95       	ror	r24
    1af4:	95 95       	asr	r25
    1af6:	87 95       	ror	r24
    1af8:	95 95       	asr	r25
    1afa:	87 95       	ror	r24
    1afc:	95 95       	asr	r25
    1afe:	87 95       	ror	r24
    1b00:	98 2f       	mov	r25, r24
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	63 e0       	ldi	r22, 0x03	; 3
    1b06:	49 2f       	mov	r20, r25
    1b08:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ed 59       	subi	r30, 0x9D	; 157
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	80 72       	andi	r24, 0x20	; 32
    1b1a:	90 70       	andi	r25, 0x00	; 0
    1b1c:	95 95       	asr	r25
    1b1e:	87 95       	ror	r24
    1b20:	95 95       	asr	r25
    1b22:	87 95       	ror	r24
    1b24:	95 95       	asr	r25
    1b26:	87 95       	ror	r24
    1b28:	95 95       	asr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	95 95       	asr	r25
    1b2e:	87 95       	ror	r24
    1b30:	98 2f       	mov	r25, r24
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	64 e0       	ldi	r22, 0x04	; 4
    1b36:	49 2f       	mov	r20, r25
    1b38:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ed 59       	subi	r30, 0x9D	; 157
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	80 74       	andi	r24, 0x40	; 64
    1b4a:	90 70       	andi	r25, 0x00	; 0
    1b4c:	08 2e       	mov	r0, r24
    1b4e:	89 2f       	mov	r24, r25
    1b50:	00 0c       	add	r0, r0
    1b52:	88 1f       	adc	r24, r24
    1b54:	99 0b       	sbc	r25, r25
    1b56:	00 0c       	add	r0, r0
    1b58:	88 1f       	adc	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	98 2f       	mov	r25, r24
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	65 e0       	ldi	r22, 0x05	; 5
    1b62:	49 2f       	mov	r20, r25
    1b64:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 59       	subi	r30, 0x9D	; 157
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 81       	ld	r24, Z
    1b70:	98 2f       	mov	r25, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	99 27       	eor	r25, r25
    1b76:	99 1f       	adc	r25, r25
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	66 e0       	ldi	r22, 0x06	; 6
    1b7c:	49 2f       	mov	r20, r25
    1b7e:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    1b82:	fe 01       	movw	r30, r28
    1b84:	ed 5b       	subi	r30, 0xBD	; 189
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	a0 e8       	ldi	r26, 0x80	; 128
    1b8e:	bf e3       	ldi	r27, 0x3F	; 63
    1b90:	80 83       	st	Z, r24
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	a2 83       	std	Z+2, r26	; 0x02
    1b96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b98:	8e 01       	movw	r16, r28
    1b9a:	01 5c       	subi	r16, 0xC1	; 193
    1b9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9e:	fe 01       	movw	r30, r28
    1ba0:	ed 5b       	subi	r30, 0xBD	; 189
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4a e7       	ldi	r20, 0x7A	; 122
    1bb2:	55 e4       	ldi	r21, 0x45	; 69
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	80 83       	st	Z, r24
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	a2 83       	std	Z+2, r26	; 0x02
    1bc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ff 96       	adiw	r30, 0x3f	; 63
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	2c f4       	brge	.+10     	; 0x1bec <LCD_sendCommand+0x40e>
		__ticks = 1;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9e af       	std	Y+62, r25	; 0x3e
    1be8:	8d af       	std	Y+61, r24	; 0x3d
    1bea:	46 c0       	rjmp	.+140    	; 0x1c78 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1bec:	fe 01       	movw	r30, r28
    1bee:	ff 96       	adiw	r30, 0x3f	; 63
    1bf0:	60 81       	ld	r22, Z
    1bf2:	71 81       	ldd	r23, Z+1	; 0x01
    1bf4:	82 81       	ldd	r24, Z+2	; 0x02
    1bf6:	93 81       	ldd	r25, Z+3	; 0x03
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	64 f5       	brge	.+88     	; 0x1c60 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	fe 01       	movw	r30, r28
    1c0a:	ed 5b       	subi	r30, 0xBD	; 189
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e af       	std	Y+62, r25	; 0x3e
    1c34:	8d af       	std	Y+61, r24	; 0x3d
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <LCD_sendCommand+0x478>
    1c38:	80 e9       	ldi	r24, 0x90	; 144
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	9c af       	std	Y+60, r25	; 0x3c
    1c3e:	8b af       	std	Y+59, r24	; 0x3b
    1c40:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c42:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_sendCommand+0x466>
    1c48:	9c af       	std	Y+60, r25	; 0x3c
    1c4a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9e af       	std	Y+62, r25	; 0x3e
    1c54:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <LCD_sendCommand+0x45a>
    1c5e:	16 c0       	rjmp	.+44     	; 0x1c8c <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	fe 01       	movw	r30, r28
    1c62:	ff 96       	adiw	r30, 0x3f	; 63
    1c64:	60 81       	ld	r22, Z
    1c66:	71 81       	ldd	r23, Z+1	; 0x01
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e af       	std	Y+62, r25	; 0x3e
    1c76:	8d af       	std	Y+61, r24	; 0x3d
    1c78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c7c:	9a af       	std	Y+58, r25	; 0x3a
    1c7e:	89 af       	std	Y+57, r24	; 0x39
    1c80:	89 ad       	ldd	r24, Y+57	; 0x39
    1c82:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c84:	01 97       	sbiw	r24, 0x01	; 1
    1c86:	f1 f7       	brne	.-4      	; 0x1c84 <LCD_sendCommand+0x4a6>
    1c88:	9a af       	std	Y+58, r25	; 0x3a
    1c8a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 e8       	ldi	r26, 0x80	; 128
    1c9c:	bf e3       	ldi	r27, 0x3F	; 63
    1c9e:	8d ab       	std	Y+53, r24	; 0x35
    1ca0:	9e ab       	std	Y+54, r25	; 0x36
    1ca2:	af ab       	std	Y+55, r26	; 0x37
    1ca4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ca8:	7e a9       	ldd	r23, Y+54	; 0x36
    1caa:	8f a9       	ldd	r24, Y+55	; 0x37
    1cac:	98 ad       	ldd	r25, Y+56	; 0x38
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a e7       	ldi	r20, 0x7A	; 122
    1cb4:	55 e4       	ldi	r21, 0x45	; 69
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	89 ab       	std	Y+49, r24	; 0x31
    1cc0:	9a ab       	std	Y+50, r25	; 0x32
    1cc2:	ab ab       	std	Y+51, r26	; 0x33
    1cc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	98 ab       	std	Y+48, r25	; 0x30
    1ce4:	8f a7       	std	Y+47, r24	; 0x2f
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1ce8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cea:	7a a9       	ldd	r23, Y+50	; 0x32
    1cec:	8b a9       	ldd	r24, Y+51	; 0x33
    1cee:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6d a9       	ldd	r22, Y+53	; 0x35
    1d02:	7e a9       	ldd	r23, Y+54	; 0x36
    1d04:	8f a9       	ldd	r24, Y+55	; 0x37
    1d06:	98 ad       	ldd	r25, Y+56	; 0x38
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <LCD_sendCommand+0x56a>
    1d2a:	80 e9       	ldi	r24, 0x90	; 144
    1d2c:	91 e0       	ldi	r25, 0x01	; 1
    1d2e:	9e a7       	std	Y+46, r25	; 0x2e
    1d30:	8d a7       	std	Y+45, r24	; 0x2d
    1d32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d34:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_sendCommand+0x558>
    1d3a:	9e a7       	std	Y+46, r25	; 0x2e
    1d3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d40:	98 a9       	ldd	r25, Y+48	; 0x30
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	98 ab       	std	Y+48, r25	; 0x30
    1d46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <LCD_sendCommand+0x54c>
    1d50:	14 c0       	rjmp	.+40     	; 0x1d7a <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	69 a9       	ldd	r22, Y+49	; 0x31
    1d54:	7a a9       	ldd	r23, Y+50	; 0x32
    1d56:	8b a9       	ldd	r24, Y+51	; 0x33
    1d58:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	98 ab       	std	Y+48, r25	; 0x30
    1d64:	8f a7       	std	Y+47, r24	; 0x2f
    1d66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d68:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6a:	9c a7       	std	Y+44, r25	; 0x2c
    1d6c:	8b a7       	std	Y+43, r24	; 0x2b
    1d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <LCD_sendCommand+0x594>
    1d76:	9c a7       	std	Y+44, r25	; 0x2c
    1d78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	62 e0       	ldi	r22, 0x02	; 2
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 e8       	ldi	r26, 0x80	; 128
    1d8a:	bf e3       	ldi	r27, 0x3F	; 63
    1d8c:	8f a3       	std	Y+39, r24	; 0x27
    1d8e:	98 a7       	std	Y+40, r25	; 0x28
    1d90:	a9 a7       	std	Y+41, r26	; 0x29
    1d92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	6f a1       	ldd	r22, Y+39	; 0x27
    1d96:	78 a5       	ldd	r23, Y+40	; 0x28
    1d98:	89 a5       	ldd	r24, Y+41	; 0x29
    1d9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a e7       	ldi	r20, 0x7A	; 122
    1da2:	55 e4       	ldi	r21, 0x45	; 69
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8b a3       	std	Y+35, r24	; 0x23
    1dae:	9c a3       	std	Y+36, r25	; 0x24
    1db0:	ad a3       	std	Y+37, r26	; 0x25
    1db2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1db4:	6b a1       	ldd	r22, Y+35	; 0x23
    1db6:	7c a1       	ldd	r23, Y+36	; 0x24
    1db8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dba:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e8       	ldi	r20, 0x80	; 128
    1dc2:	5f e3       	ldi	r21, 0x3F	; 63
    1dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc8:	88 23       	and	r24, r24
    1dca:	2c f4       	brge	.+10     	; 0x1dd6 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9a a3       	std	Y+34, r25	; 0x22
    1dd2:	89 a3       	std	Y+33, r24	; 0x21
    1dd4:	3f c0       	rjmp	.+126    	; 0x1e54 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1dd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dda:	8d a1       	ldd	r24, Y+37	; 0x25
    1ddc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	4c f5       	brge	.+82     	; 0x1e40 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	6f a1       	ldd	r22, Y+39	; 0x27
    1df0:	78 a5       	ldd	r23, Y+40	; 0x28
    1df2:	89 a5       	ldd	r24, Y+41	; 0x29
    1df4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <LCD_sendCommand+0x658>
    1e18:	80 e9       	ldi	r24, 0x90	; 144
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	98 a3       	std	Y+32, r25	; 0x20
    1e1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e22:	98 a1       	ldd	r25, Y+32	; 0x20
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_sendCommand+0x646>
    1e28:	98 a3       	std	Y+32, r25	; 0x20
    1e2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9a a3       	std	Y+34, r25	; 0x22
    1e34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	89 a1       	ldd	r24, Y+33	; 0x21
    1e38:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <LCD_sendCommand+0x63a>
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	6b a1       	ldd	r22, Y+35	; 0x23
    1e42:	7c a1       	ldd	r23, Y+36	; 0x24
    1e44:	8d a1       	ldd	r24, Y+37	; 0x25
    1e46:	9e a1       	ldd	r25, Y+38	; 0x26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9a a3       	std	Y+34, r25	; 0x22
    1e52:	89 a3       	std	Y+33, r24	; 0x21
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_sendCommand+0x682>
    1e64:	9e 8f       	std	Y+30, r25	; 0x1e
    1e66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ed 59       	subi	r30, 0x9D	; 157
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	80 81       	ld	r24, Z
    1e70:	98 2f       	mov	r25, r24
    1e72:	91 70       	andi	r25, 0x01	; 1
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	63 e0       	ldi	r22, 0x03	; 3
    1e78:	49 2f       	mov	r20, r25
    1e7a:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1e7e:	fe 01       	movw	r30, r28
    1e80:	ed 59       	subi	r30, 0x9D	; 157
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	82 70       	andi	r24, 0x02	; 2
    1e8c:	90 70       	andi	r25, 0x00	; 0
    1e8e:	95 95       	asr	r25
    1e90:	87 95       	ror	r24
    1e92:	98 2f       	mov	r25, r24
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	64 e0       	ldi	r22, 0x04	; 4
    1e98:	49 2f       	mov	r20, r25
    1e9a:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	ed 59       	subi	r30, 0x9D	; 157
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	84 70       	andi	r24, 0x04	; 4
    1eac:	90 70       	andi	r25, 0x00	; 0
    1eae:	95 95       	asr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	65 e0       	ldi	r22, 0x05	; 5
    1ebc:	49 2f       	mov	r20, r25
    1ebe:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	ed 59       	subi	r30, 0x9D	; 157
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	80 81       	ld	r24, Z
    1eca:	88 2f       	mov	r24, r24
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	88 70       	andi	r24, 0x08	; 8
    1ed0:	90 70       	andi	r25, 0x00	; 0
    1ed2:	95 95       	asr	r25
    1ed4:	87 95       	ror	r24
    1ed6:	95 95       	asr	r25
    1ed8:	87 95       	ror	r24
    1eda:	95 95       	asr	r25
    1edc:	87 95       	ror	r24
    1ede:	98 2f       	mov	r25, r24
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	66 e0       	ldi	r22, 0x06	; 6
    1ee4:	49 2f       	mov	r20, r25
    1ee6:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e8       	ldi	r26, 0x80	; 128
    1ef0:	bf e3       	ldi	r27, 0x3F	; 63
    1ef2:	89 8f       	std	Y+25, r24	; 0x19
    1ef4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efa:	69 8d       	ldd	r22, Y+25	; 0x19
    1efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	4a e7       	ldi	r20, 0x7A	; 122
    1f08:	55 e4       	ldi	r21, 0x45	; 69
    1f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	8d 8b       	std	Y+21, r24	; 0x15
    1f14:	9e 8b       	std	Y+22, r25	; 0x16
    1f16:	af 8b       	std	Y+23, r26	; 0x17
    1f18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f1a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1e:	8f 89       	ldd	r24, Y+23	; 0x17
    1f20:	98 8d       	ldd	r25, Y+24	; 0x18
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e8       	ldi	r20, 0x80	; 128
    1f28:	5f e3       	ldi	r21, 0x3F	; 63
    1f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <LCD_sendCommand+0x75e>
		__ticks = 1;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	9c 8b       	std	Y+20, r25	; 0x14
    1f38:	8b 8b       	std	Y+19, r24	; 0x13
    1f3a:	3f c0       	rjmp	.+126    	; 0x1fba <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f40:	8f 89       	ldd	r24, Y+23	; 0x17
    1f42:	98 8d       	ldd	r25, Y+24	; 0x18
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	3f ef       	ldi	r19, 0xFF	; 255
    1f48:	4f e7       	ldi	r20, 0x7F	; 127
    1f4a:	57 e4       	ldi	r21, 0x47	; 71
    1f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f50:	18 16       	cp	r1, r24
    1f52:	4c f5       	brge	.+82     	; 0x1fa6 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f54:	69 8d       	ldd	r22, Y+25	; 0x19
    1f56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e2       	ldi	r20, 0x20	; 32
    1f62:	51 e4       	ldi	r21, 0x41	; 65
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9c 8b       	std	Y+20, r25	; 0x14
    1f7a:	8b 8b       	std	Y+19, r24	; 0x13
    1f7c:	0f c0       	rjmp	.+30     	; 0x1f9c <LCD_sendCommand+0x7be>
    1f7e:	80 e9       	ldi	r24, 0x90	; 144
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	9a 8b       	std	Y+18, r25	; 0x12
    1f84:	89 8b       	std	Y+17, r24	; 0x11
    1f86:	89 89       	ldd	r24, Y+17	; 0x11
    1f88:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_sendCommand+0x7ac>
    1f8e:	9a 8b       	std	Y+18, r25	; 0x12
    1f90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	8b 89       	ldd	r24, Y+19	; 0x13
    1f94:	9c 89       	ldd	r25, Y+20	; 0x14
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	9c 8b       	std	Y+20, r25	; 0x14
    1f9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	69 f7       	brne	.-38     	; 0x1f7e <LCD_sendCommand+0x7a0>
    1fa4:	14 c0       	rjmp	.+40     	; 0x1fce <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    1faa:	8f 89       	ldd	r24, Y+23	; 0x17
    1fac:	98 8d       	ldd	r25, Y+24	; 0x18
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	98 8b       	std	Y+16, r25	; 0x10
    1fc0:	8f 87       	std	Y+15, r24	; 0x0f
    1fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc4:	98 89       	ldd	r25, Y+16	; 0x10
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <LCD_sendCommand+0x7e8>
    1fca:	98 8b       	std	Y+16, r25	; 0x10
    1fcc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a0 e8       	ldi	r26, 0x80	; 128
    1fde:	bf e3       	ldi	r27, 0x3F	; 63
    1fe0:	8b 87       	std	Y+11, r24	; 0x0b
    1fe2:	9c 87       	std	Y+12, r25	; 0x0c
    1fe4:	ad 87       	std	Y+13, r26	; 0x0d
    1fe6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a e7       	ldi	r20, 0x7A	; 122
    1ff6:	55 e4       	ldi	r21, 0x45	; 69
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8f 83       	std	Y+7, r24	; 0x07
    2002:	98 87       	std	Y+8, r25	; 0x08
    2004:	a9 87       	std	Y+9, r26	; 0x09
    2006:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201c:	88 23       	and	r24, r24
    201e:	2c f4       	brge	.+10     	; 0x202a <LCD_sendCommand+0x84c>
		__ticks = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	3f c0       	rjmp	.+126    	; 0x20a8 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    202a:	6f 81       	ldd	r22, Y+7	; 0x07
    202c:	78 85       	ldd	r23, Y+8	; 0x08
    202e:	89 85       	ldd	r24, Y+9	; 0x09
    2030:	9a 85       	ldd	r25, Y+10	; 0x0a
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	4c f5       	brge	.+82     	; 0x2094 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2042:	6b 85       	ldd	r22, Y+11	; 0x0b
    2044:	7c 85       	ldd	r23, Y+12	; 0x0c
    2046:	8d 85       	ldd	r24, Y+13	; 0x0d
    2048:	9e 85       	ldd	r25, Y+14	; 0x0e
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
    206a:	0f c0       	rjmp	.+30     	; 0x208a <LCD_sendCommand+0x8ac>
    206c:	80 e9       	ldi	r24, 0x90	; 144
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	9c 83       	std	Y+4, r25	; 0x04
    2072:	8b 83       	std	Y+3, r24	; 0x03
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	9c 81       	ldd	r25, Y+4	; 0x04
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_sendCommand+0x89a>
    207c:	9c 83       	std	Y+4, r25	; 0x04
    207e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	9e 83       	std	Y+6, r25	; 0x06
    2088:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	8d 81       	ldd	r24, Y+5	; 0x05
    208c:	9e 81       	ldd	r25, Y+6	; 0x06
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	69 f7       	brne	.-38     	; 0x206c <LCD_sendCommand+0x88e>
    2092:	14 c0       	rjmp	.+40     	; 0x20bc <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	6f 81       	ldd	r22, Y+7	; 0x07
    2096:	78 85       	ldd	r23, Y+8	; 0x08
    2098:	89 85       	ldd	r24, Y+9	; 0x09
    209a:	9a 85       	ldd	r25, Y+10	; 0x0a
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	8d 81       	ldd	r24, Y+5	; 0x05
    20aa:	9e 81       	ldd	r25, Y+6	; 0x06
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_sendCommand+0x8d6>
    20b8:	9a 83       	std	Y+2, r25	; 0x02
    20ba:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    20bc:	cd 59       	subi	r28, 0x9D	; 157
    20be:	df 4f       	sbci	r29, 0xFF	; 255
    20c0:	0f b6       	in	r0, 0x3f	; 63
    20c2:	f8 94       	cli
    20c4:	de bf       	out	0x3e, r29	; 62
    20c6:	0f be       	out	0x3f, r0	; 63
    20c8:	cd bf       	out	0x3d, r28	; 61
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

000020d4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	c3 56       	subi	r28, 0x63	; 99
    20e2:	d0 40       	sbci	r29, 0x00	; 0
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	fe 01       	movw	r30, r28
    20f0:	ed 59       	subi	r30, 0x9D	; 157
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	41 e0       	ldi	r20, 0x01	; 1
    20fc:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    2100:	fe 01       	movw	r30, r28
    2102:	e1 5a       	subi	r30, 0xA1	; 161
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e8       	ldi	r26, 0x80	; 128
    210c:	bf e3       	ldi	r27, 0x3F	; 63
    210e:	80 83       	st	Z, r24
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	a2 83       	std	Z+2, r26	; 0x02
    2114:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	8e 01       	movw	r16, r28
    2118:	05 5a       	subi	r16, 0xA5	; 165
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	fe 01       	movw	r30, r28
    211e:	e1 5a       	subi	r30, 0xA1	; 161
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	55 e4       	ldi	r21, 0x45	; 69
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	f8 01       	movw	r30, r16
    213c:	80 83       	st	Z, r24
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	a2 83       	std	Z+2, r26	; 0x02
    2142:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2144:	fe 01       	movw	r30, r28
    2146:	e5 5a       	subi	r30, 0xA5	; 165
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	60 81       	ld	r22, Z
    214c:	71 81       	ldd	r23, Z+1	; 0x01
    214e:	82 81       	ldd	r24, Z+2	; 0x02
    2150:	93 81       	ldd	r25, Z+3	; 0x03
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	44 f4       	brge	.+16     	; 0x2172 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2162:	fe 01       	movw	r30, r28
    2164:	e7 5a       	subi	r30, 0xA7	; 167
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
    2170:	64 c0       	rjmp	.+200    	; 0x223a <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2172:	fe 01       	movw	r30, r28
    2174:	e5 5a       	subi	r30, 0xA5	; 165
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	3f ef       	ldi	r19, 0xFF	; 255
    2184:	4f e7       	ldi	r20, 0x7F	; 127
    2186:	57 e4       	ldi	r21, 0x47	; 71
    2188:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    218c:	18 16       	cp	r1, r24
    218e:	0c f0       	brlt	.+2      	; 0x2192 <LCD_displayCharacter+0xbe>
    2190:	43 c0       	rjmp	.+134    	; 0x2218 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	fe 01       	movw	r30, r28
    2194:	e1 5a       	subi	r30, 0xA1	; 161
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	8e 01       	movw	r16, r28
    21b2:	07 5a       	subi	r16, 0xA7	; 167
    21b4:	1f 4f       	sbci	r17, 0xFF	; 255
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	f8 01       	movw	r30, r16
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
    21c8:	1f c0       	rjmp	.+62     	; 0x2208 <LCD_displayCharacter+0x134>
    21ca:	fe 01       	movw	r30, r28
    21cc:	e9 5a       	subi	r30, 0xA9	; 169
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	80 e9       	ldi	r24, 0x90	; 144
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	91 83       	std	Z+1, r25	; 0x01
    21d6:	80 83       	st	Z, r24
    21d8:	fe 01       	movw	r30, r28
    21da:	e9 5a       	subi	r30, 0xA9	; 169
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	80 81       	ld	r24, Z
    21e0:	91 81       	ldd	r25, Z+1	; 0x01
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_displayCharacter+0x10e>
    21e6:	fe 01       	movw	r30, r28
    21e8:	e9 5a       	subi	r30, 0xA9	; 169
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	de 01       	movw	r26, r28
    21f2:	a7 5a       	subi	r26, 0xA7	; 167
    21f4:	bf 4f       	sbci	r27, 0xFF	; 255
    21f6:	fe 01       	movw	r30, r28
    21f8:	e7 5a       	subi	r30, 0xA7	; 167
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	11 96       	adiw	r26, 0x01	; 1
    2204:	9c 93       	st	X, r25
    2206:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	fe 01       	movw	r30, r28
    220a:	e7 5a       	subi	r30, 0xA7	; 167
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	d1 f6       	brne	.-76     	; 0x21ca <LCD_displayCharacter+0xf6>
    2216:	27 c0       	rjmp	.+78     	; 0x2266 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	8e 01       	movw	r16, r28
    221a:	07 5a       	subi	r16, 0xA7	; 167
    221c:	1f 4f       	sbci	r17, 0xFF	; 255
    221e:	fe 01       	movw	r30, r28
    2220:	e5 5a       	subi	r30, 0xA5	; 165
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	f8 01       	movw	r30, r16
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	80 83       	st	Z, r24
    223a:	de 01       	movw	r26, r28
    223c:	ab 5a       	subi	r26, 0xAB	; 171
    223e:	bf 4f       	sbci	r27, 0xFF	; 255
    2240:	fe 01       	movw	r30, r28
    2242:	e7 5a       	subi	r30, 0xA7	; 167
    2244:	ff 4f       	sbci	r31, 0xFF	; 255
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	8d 93       	st	X+, r24
    224c:	9c 93       	st	X, r25
    224e:	fe 01       	movw	r30, r28
    2250:	eb 5a       	subi	r30, 0xAB	; 171
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_displayCharacter+0x184>
    225c:	fe 01       	movw	r30, r28
    225e:	eb 5a       	subi	r30, 0xAB	; 171
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	91 83       	std	Z+1, r25	; 0x01
    2264:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	62 e0       	ldi	r22, 0x02	; 2
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    2270:	fe 01       	movw	r30, r28
    2272:	ef 5a       	subi	r30, 0xAF	; 175
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e8       	ldi	r26, 0x80	; 128
    227c:	bf e3       	ldi	r27, 0x3F	; 63
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	8e 01       	movw	r16, r28
    2288:	03 5b       	subi	r16, 0xB3	; 179
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	ef 5a       	subi	r30, 0xAF	; 175
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a e7       	ldi	r20, 0x7A	; 122
    22a0:	55 e4       	ldi	r21, 0x45	; 69
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e3 5b       	subi	r30, 0xB3	; 179
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	44 f4       	brge	.+16     	; 0x22e2 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    22d2:	fe 01       	movw	r30, r28
    22d4:	e5 5b       	subi	r30, 0xB5	; 181
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	64 c0       	rjmp	.+200    	; 0x23aa <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e3 5b       	subi	r30, 0xB3	; 179
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <LCD_displayCharacter+0x22e>
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	fe 01       	movw	r30, r28
    2304:	ef 5a       	subi	r30, 0xAF	; 175
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8e 01       	movw	r16, r28
    2322:	05 5b       	subi	r16, 0xB5	; 181
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	1f c0       	rjmp	.+62     	; 0x2378 <LCD_displayCharacter+0x2a4>
    233a:	fe 01       	movw	r30, r28
    233c:	e7 5b       	subi	r30, 0xB7	; 183
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 e9       	ldi	r24, 0x90	; 144
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	fe 01       	movw	r30, r28
    234a:	e7 5b       	subi	r30, 0xB7	; 183
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_displayCharacter+0x27e>
    2356:	fe 01       	movw	r30, r28
    2358:	e7 5b       	subi	r30, 0xB7	; 183
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	de 01       	movw	r26, r28
    2362:	a5 5b       	subi	r26, 0xB5	; 181
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e5 5b       	subi	r30, 0xB5	; 181
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 93       	st	X, r25
    2376:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	fe 01       	movw	r30, r28
    237a:	e5 5b       	subi	r30, 0xB5	; 181
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	d1 f6       	brne	.-76     	; 0x233a <LCD_displayCharacter+0x266>
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	8e 01       	movw	r16, r28
    238a:	05 5b       	subi	r16, 0xB5	; 181
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	e3 5b       	subi	r30, 0xB3	; 179
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	de 01       	movw	r26, r28
    23ac:	a9 5b       	subi	r26, 0xB9	; 185
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e5 5b       	subi	r30, 0xB5	; 181
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	8d 93       	st	X+, r24
    23bc:	9c 93       	st	X, r25
    23be:	fe 01       	movw	r30, r28
    23c0:	e9 5b       	subi	r30, 0xB9	; 185
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_displayCharacter+0x2f4>
    23cc:	fe 01       	movw	r30, r28
    23ce:	e9 5b       	subi	r30, 0xB9	; 185
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    23d6:	fe 01       	movw	r30, r28
    23d8:	ed 59       	subi	r30, 0x9D	; 157
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	80 71       	andi	r24, 0x10	; 16
    23e4:	90 70       	andi	r25, 0x00	; 0
    23e6:	95 95       	asr	r25
    23e8:	87 95       	ror	r24
    23ea:	95 95       	asr	r25
    23ec:	87 95       	ror	r24
    23ee:	95 95       	asr	r25
    23f0:	87 95       	ror	r24
    23f2:	95 95       	asr	r25
    23f4:	87 95       	ror	r24
    23f6:	98 2f       	mov	r25, r24
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	63 e0       	ldi	r22, 0x03	; 3
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2402:	fe 01       	movw	r30, r28
    2404:	ed 59       	subi	r30, 0x9D	; 157
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 81       	ld	r24, Z
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	80 72       	andi	r24, 0x20	; 32
    2410:	90 70       	andi	r25, 0x00	; 0
    2412:	95 95       	asr	r25
    2414:	87 95       	ror	r24
    2416:	95 95       	asr	r25
    2418:	87 95       	ror	r24
    241a:	95 95       	asr	r25
    241c:	87 95       	ror	r24
    241e:	95 95       	asr	r25
    2420:	87 95       	ror	r24
    2422:	95 95       	asr	r25
    2424:	87 95       	ror	r24
    2426:	98 2f       	mov	r25, r24
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	64 e0       	ldi	r22, 0x04	; 4
    242c:	49 2f       	mov	r20, r25
    242e:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2432:	fe 01       	movw	r30, r28
    2434:	ed 59       	subi	r30, 0x9D	; 157
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	88 2f       	mov	r24, r24
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	80 74       	andi	r24, 0x40	; 64
    2440:	90 70       	andi	r25, 0x00	; 0
    2442:	08 2e       	mov	r0, r24
    2444:	89 2f       	mov	r24, r25
    2446:	00 0c       	add	r0, r0
    2448:	88 1f       	adc	r24, r24
    244a:	99 0b       	sbc	r25, r25
    244c:	00 0c       	add	r0, r0
    244e:	88 1f       	adc	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	98 2f       	mov	r25, r24
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	65 e0       	ldi	r22, 0x05	; 5
    2458:	49 2f       	mov	r20, r25
    245a:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    245e:	fe 01       	movw	r30, r28
    2460:	ed 59       	subi	r30, 0x9D	; 157
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	98 2f       	mov	r25, r24
    2468:	99 1f       	adc	r25, r25
    246a:	99 27       	eor	r25, r25
    246c:	99 1f       	adc	r25, r25
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	66 e0       	ldi	r22, 0x06	; 6
    2472:	49 2f       	mov	r20, r25
    2474:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    2478:	fe 01       	movw	r30, r28
    247a:	ed 5b       	subi	r30, 0xBD	; 189
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 e8       	ldi	r26, 0x80	; 128
    2484:	bf e3       	ldi	r27, 0x3F	; 63
    2486:	80 83       	st	Z, r24
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	a2 83       	std	Z+2, r26	; 0x02
    248c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248e:	8e 01       	movw	r16, r28
    2490:	01 5c       	subi	r16, 0xC1	; 193
    2492:	1f 4f       	sbci	r17, 0xFF	; 255
    2494:	fe 01       	movw	r30, r28
    2496:	ed 5b       	subi	r30, 0xBD	; 189
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	60 81       	ld	r22, Z
    249c:	71 81       	ldd	r23, Z+1	; 0x01
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4a e7       	ldi	r20, 0x7A	; 122
    24a8:	55 e4       	ldi	r21, 0x45	; 69
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	f8 01       	movw	r30, r16
    24b4:	80 83       	st	Z, r24
    24b6:	91 83       	std	Z+1, r25	; 0x01
    24b8:	a2 83       	std	Z+2, r26	; 0x02
    24ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24bc:	fe 01       	movw	r30, r28
    24be:	ff 96       	adiw	r30, 0x3f	; 63
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e8       	ldi	r20, 0x80	; 128
    24ce:	5f e3       	ldi	r21, 0x3F	; 63
    24d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	2c f4       	brge	.+10     	; 0x24e2 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	9e af       	std	Y+62, r25	; 0x3e
    24de:	8d af       	std	Y+61, r24	; 0x3d
    24e0:	46 c0       	rjmp	.+140    	; 0x256e <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    24e2:	fe 01       	movw	r30, r28
    24e4:	ff 96       	adiw	r30, 0x3f	; 63
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	64 f5       	brge	.+88     	; 0x2556 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	fe 01       	movw	r30, r28
    2500:	ed 5b       	subi	r30, 0xBD	; 189
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e2       	ldi	r20, 0x20	; 32
    2512:	51 e4       	ldi	r21, 0x41	; 65
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	9e af       	std	Y+62, r25	; 0x3e
    252a:	8d af       	std	Y+61, r24	; 0x3d
    252c:	0f c0       	rjmp	.+30     	; 0x254c <LCD_displayCharacter+0x478>
    252e:	80 e9       	ldi	r24, 0x90	; 144
    2530:	91 e0       	ldi	r25, 0x01	; 1
    2532:	9c af       	std	Y+60, r25	; 0x3c
    2534:	8b af       	std	Y+59, r24	; 0x3b
    2536:	8b ad       	ldd	r24, Y+59	; 0x3b
    2538:	9c ad       	ldd	r25, Y+60	; 0x3c
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <LCD_displayCharacter+0x466>
    253e:	9c af       	std	Y+60, r25	; 0x3c
    2540:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2542:	8d ad       	ldd	r24, Y+61	; 0x3d
    2544:	9e ad       	ldd	r25, Y+62	; 0x3e
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	9e af       	std	Y+62, r25	; 0x3e
    254a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254c:	8d ad       	ldd	r24, Y+61	; 0x3d
    254e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	69 f7       	brne	.-38     	; 0x252e <LCD_displayCharacter+0x45a>
    2554:	16 c0       	rjmp	.+44     	; 0x2582 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2556:	fe 01       	movw	r30, r28
    2558:	ff 96       	adiw	r30, 0x3f	; 63
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e af       	std	Y+62, r25	; 0x3e
    256c:	8d af       	std	Y+61, r24	; 0x3d
    256e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2570:	9e ad       	ldd	r25, Y+62	; 0x3e
    2572:	9a af       	std	Y+58, r25	; 0x3a
    2574:	89 af       	std	Y+57, r24	; 0x39
    2576:	89 ad       	ldd	r24, Y+57	; 0x39
    2578:	9a ad       	ldd	r25, Y+58	; 0x3a
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <LCD_displayCharacter+0x4a6>
    257e:	9a af       	std	Y+58, r25	; 0x3a
    2580:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a0 e8       	ldi	r26, 0x80	; 128
    2592:	bf e3       	ldi	r27, 0x3F	; 63
    2594:	8d ab       	std	Y+53, r24	; 0x35
    2596:	9e ab       	std	Y+54, r25	; 0x36
    2598:	af ab       	std	Y+55, r26	; 0x37
    259a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259c:	6d a9       	ldd	r22, Y+53	; 0x35
    259e:	7e a9       	ldd	r23, Y+54	; 0x36
    25a0:	8f a9       	ldd	r24, Y+55	; 0x37
    25a2:	98 ad       	ldd	r25, Y+56	; 0x38
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a e7       	ldi	r20, 0x7A	; 122
    25aa:	55 e4       	ldi	r21, 0x45	; 69
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	89 ab       	std	Y+49, r24	; 0x31
    25b6:	9a ab       	std	Y+50, r25	; 0x32
    25b8:	ab ab       	std	Y+51, r26	; 0x33
    25ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25bc:	69 a9       	ldd	r22, Y+49	; 0x31
    25be:	7a a9       	ldd	r23, Y+50	; 0x32
    25c0:	8b a9       	ldd	r24, Y+51	; 0x33
    25c2:	9c a9       	ldd	r25, Y+52	; 0x34
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e8       	ldi	r20, 0x80	; 128
    25ca:	5f e3       	ldi	r21, 0x3F	; 63
    25cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d0:	88 23       	and	r24, r24
    25d2:	2c f4       	brge	.+10     	; 0x25de <LCD_displayCharacter+0x50a>
		__ticks = 1;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	98 ab       	std	Y+48, r25	; 0x30
    25da:	8f a7       	std	Y+47, r24	; 0x2f
    25dc:	3f c0       	rjmp	.+126    	; 0x265c <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    25de:	69 a9       	ldd	r22, Y+49	; 0x31
    25e0:	7a a9       	ldd	r23, Y+50	; 0x32
    25e2:	8b a9       	ldd	r24, Y+51	; 0x33
    25e4:	9c a9       	ldd	r25, Y+52	; 0x34
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	3f ef       	ldi	r19, 0xFF	; 255
    25ea:	4f e7       	ldi	r20, 0x7F	; 127
    25ec:	57 e4       	ldi	r21, 0x47	; 71
    25ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f2:	18 16       	cp	r1, r24
    25f4:	4c f5       	brge	.+82     	; 0x2648 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f6:	6d a9       	ldd	r22, Y+53	; 0x35
    25f8:	7e a9       	ldd	r23, Y+54	; 0x36
    25fa:	8f a9       	ldd	r24, Y+55	; 0x37
    25fc:	98 ad       	ldd	r25, Y+56	; 0x38
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e2       	ldi	r20, 0x20	; 32
    2604:	51 e4       	ldi	r21, 0x41	; 65
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	bc 01       	movw	r22, r24
    2610:	cd 01       	movw	r24, r26
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	98 ab       	std	Y+48, r25	; 0x30
    261c:	8f a7       	std	Y+47, r24	; 0x2f
    261e:	0f c0       	rjmp	.+30     	; 0x263e <LCD_displayCharacter+0x56a>
    2620:	80 e9       	ldi	r24, 0x90	; 144
    2622:	91 e0       	ldi	r25, 0x01	; 1
    2624:	9e a7       	std	Y+46, r25	; 0x2e
    2626:	8d a7       	std	Y+45, r24	; 0x2d
    2628:	8d a5       	ldd	r24, Y+45	; 0x2d
    262a:	9e a5       	ldd	r25, Y+46	; 0x2e
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_displayCharacter+0x558>
    2630:	9e a7       	std	Y+46, r25	; 0x2e
    2632:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2634:	8f a5       	ldd	r24, Y+47	; 0x2f
    2636:	98 a9       	ldd	r25, Y+48	; 0x30
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	98 ab       	std	Y+48, r25	; 0x30
    263c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2640:	98 a9       	ldd	r25, Y+48	; 0x30
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	69 f7       	brne	.-38     	; 0x2620 <LCD_displayCharacter+0x54c>
    2646:	14 c0       	rjmp	.+40     	; 0x2670 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2648:	69 a9       	ldd	r22, Y+49	; 0x31
    264a:	7a a9       	ldd	r23, Y+50	; 0x32
    264c:	8b a9       	ldd	r24, Y+51	; 0x33
    264e:	9c a9       	ldd	r25, Y+52	; 0x34
    2650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	98 ab       	std	Y+48, r25	; 0x30
    265a:	8f a7       	std	Y+47, r24	; 0x2f
    265c:	8f a5       	ldd	r24, Y+47	; 0x2f
    265e:	98 a9       	ldd	r25, Y+48	; 0x30
    2660:	9c a7       	std	Y+44, r25	; 0x2c
    2662:	8b a7       	std	Y+43, r24	; 0x2b
    2664:	8b a5       	ldd	r24, Y+43	; 0x2b
    2666:	9c a5       	ldd	r25, Y+44	; 0x2c
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_displayCharacter+0x594>
    266c:	9c a7       	std	Y+44, r25	; 0x2c
    266e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	62 e0       	ldi	r22, 0x02	; 2
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a0 e8       	ldi	r26, 0x80	; 128
    2680:	bf e3       	ldi	r27, 0x3F	; 63
    2682:	8f a3       	std	Y+39, r24	; 0x27
    2684:	98 a7       	std	Y+40, r25	; 0x28
    2686:	a9 a7       	std	Y+41, r26	; 0x29
    2688:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	6f a1       	ldd	r22, Y+39	; 0x27
    268c:	78 a5       	ldd	r23, Y+40	; 0x28
    268e:	89 a5       	ldd	r24, Y+41	; 0x29
    2690:	9a a5       	ldd	r25, Y+42	; 0x2a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	4a e7       	ldi	r20, 0x7A	; 122
    2698:	55 e4       	ldi	r21, 0x45	; 69
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	8b a3       	std	Y+35, r24	; 0x23
    26a4:	9c a3       	std	Y+36, r25	; 0x24
    26a6:	ad a3       	std	Y+37, r26	; 0x25
    26a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26aa:	6b a1       	ldd	r22, Y+35	; 0x23
    26ac:	7c a1       	ldd	r23, Y+36	; 0x24
    26ae:	8d a1       	ldd	r24, Y+37	; 0x25
    26b0:	9e a1       	ldd	r25, Y+38	; 0x26
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	2c f4       	brge	.+10     	; 0x26cc <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	9a a3       	std	Y+34, r25	; 0x22
    26c8:	89 a3       	std	Y+33, r24	; 0x21
    26ca:	3f c0       	rjmp	.+126    	; 0x274a <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    26cc:	6b a1       	ldd	r22, Y+35	; 0x23
    26ce:	7c a1       	ldd	r23, Y+36	; 0x24
    26d0:	8d a1       	ldd	r24, Y+37	; 0x25
    26d2:	9e a1       	ldd	r25, Y+38	; 0x26
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	3f ef       	ldi	r19, 0xFF	; 255
    26d8:	4f e7       	ldi	r20, 0x7F	; 127
    26da:	57 e4       	ldi	r21, 0x47	; 71
    26dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e0:	18 16       	cp	r1, r24
    26e2:	4c f5       	brge	.+82     	; 0x2736 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e4:	6f a1       	ldd	r22, Y+39	; 0x27
    26e6:	78 a5       	ldd	r23, Y+40	; 0x28
    26e8:	89 a5       	ldd	r24, Y+41	; 0x29
    26ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	40 e2       	ldi	r20, 0x20	; 32
    26f2:	51 e4       	ldi	r21, 0x41	; 65
    26f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9a a3       	std	Y+34, r25	; 0x22
    270a:	89 a3       	std	Y+33, r24	; 0x21
    270c:	0f c0       	rjmp	.+30     	; 0x272c <LCD_displayCharacter+0x658>
    270e:	80 e9       	ldi	r24, 0x90	; 144
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	98 a3       	std	Y+32, r25	; 0x20
    2714:	8f 8f       	std	Y+31, r24	; 0x1f
    2716:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2718:	98 a1       	ldd	r25, Y+32	; 0x20
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <LCD_displayCharacter+0x646>
    271e:	98 a3       	std	Y+32, r25	; 0x20
    2720:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2722:	89 a1       	ldd	r24, Y+33	; 0x21
    2724:	9a a1       	ldd	r25, Y+34	; 0x22
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	9a a3       	std	Y+34, r25	; 0x22
    272a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	89 a1       	ldd	r24, Y+33	; 0x21
    272e:	9a a1       	ldd	r25, Y+34	; 0x22
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	69 f7       	brne	.-38     	; 0x270e <LCD_displayCharacter+0x63a>
    2734:	14 c0       	rjmp	.+40     	; 0x275e <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2736:	6b a1       	ldd	r22, Y+35	; 0x23
    2738:	7c a1       	ldd	r23, Y+36	; 0x24
    273a:	8d a1       	ldd	r24, Y+37	; 0x25
    273c:	9e a1       	ldd	r25, Y+38	; 0x26
    273e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9a a3       	std	Y+34, r25	; 0x22
    2748:	89 a3       	std	Y+33, r24	; 0x21
    274a:	89 a1       	ldd	r24, Y+33	; 0x21
    274c:	9a a1       	ldd	r25, Y+34	; 0x22
    274e:	9e 8f       	std	Y+30, r25	; 0x1e
    2750:	8d 8f       	std	Y+29, r24	; 0x1d
    2752:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2754:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_displayCharacter+0x682>
    275a:	9e 8f       	std	Y+30, r25	; 0x1e
    275c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    275e:	fe 01       	movw	r30, r28
    2760:	ed 59       	subi	r30, 0x9D	; 157
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	98 2f       	mov	r25, r24
    2768:	91 70       	andi	r25, 0x01	; 1
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	63 e0       	ldi	r22, 0x03	; 3
    276e:	49 2f       	mov	r20, r25
    2770:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2774:	fe 01       	movw	r30, r28
    2776:	ed 59       	subi	r30, 0x9D	; 157
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	82 70       	andi	r24, 0x02	; 2
    2782:	90 70       	andi	r25, 0x00	; 0
    2784:	95 95       	asr	r25
    2786:	87 95       	ror	r24
    2788:	98 2f       	mov	r25, r24
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	64 e0       	ldi	r22, 0x04	; 4
    278e:	49 2f       	mov	r20, r25
    2790:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2794:	fe 01       	movw	r30, r28
    2796:	ed 59       	subi	r30, 0x9D	; 157
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	84 70       	andi	r24, 0x04	; 4
    27a2:	90 70       	andi	r25, 0x00	; 0
    27a4:	95 95       	asr	r25
    27a6:	87 95       	ror	r24
    27a8:	95 95       	asr	r25
    27aa:	87 95       	ror	r24
    27ac:	98 2f       	mov	r25, r24
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	65 e0       	ldi	r22, 0x05	; 5
    27b2:	49 2f       	mov	r20, r25
    27b4:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    27b8:	fe 01       	movw	r30, r28
    27ba:	ed 59       	subi	r30, 0x9D	; 157
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	80 81       	ld	r24, Z
    27c0:	88 2f       	mov	r24, r24
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	88 70       	andi	r24, 0x08	; 8
    27c6:	90 70       	andi	r25, 0x00	; 0
    27c8:	95 95       	asr	r25
    27ca:	87 95       	ror	r24
    27cc:	95 95       	asr	r25
    27ce:	87 95       	ror	r24
    27d0:	95 95       	asr	r25
    27d2:	87 95       	ror	r24
    27d4:	98 2f       	mov	r25, r24
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	66 e0       	ldi	r22, 0x06	; 6
    27da:	49 2f       	mov	r20, r25
    27dc:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e8       	ldi	r26, 0x80	; 128
    27e6:	bf e3       	ldi	r27, 0x3F	; 63
    27e8:	89 8f       	std	Y+25, r24	; 0x19
    27ea:	9a 8f       	std	Y+26, r25	; 0x1a
    27ec:	ab 8f       	std	Y+27, r26	; 0x1b
    27ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	69 8d       	ldd	r22, Y+25	; 0x19
    27f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a e7       	ldi	r20, 0x7A	; 122
    27fe:	55 e4       	ldi	r21, 0x45	; 69
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8d 8b       	std	Y+21, r24	; 0x15
    280a:	9e 8b       	std	Y+22, r25	; 0x16
    280c:	af 8b       	std	Y+23, r26	; 0x17
    280e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2810:	6d 89       	ldd	r22, Y+21	; 0x15
    2812:	7e 89       	ldd	r23, Y+22	; 0x16
    2814:	8f 89       	ldd	r24, Y+23	; 0x17
    2816:	98 8d       	ldd	r25, Y+24	; 0x18
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9c 8b       	std	Y+20, r25	; 0x14
    282e:	8b 8b       	std	Y+19, r24	; 0x13
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2832:	6d 89       	ldd	r22, Y+21	; 0x15
    2834:	7e 89       	ldd	r23, Y+22	; 0x16
    2836:	8f 89       	ldd	r24, Y+23	; 0x17
    2838:	98 8d       	ldd	r25, Y+24	; 0x18
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	69 8d       	ldd	r22, Y+25	; 0x19
    284c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    284e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2850:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9c 8b       	std	Y+20, r25	; 0x14
    2870:	8b 8b       	std	Y+19, r24	; 0x13
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <LCD_displayCharacter+0x7be>
    2874:	80 e9       	ldi	r24, 0x90	; 144
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	9a 8b       	std	Y+18, r25	; 0x12
    287a:	89 8b       	std	Y+17, r24	; 0x11
    287c:	89 89       	ldd	r24, Y+17	; 0x11
    287e:	9a 89       	ldd	r25, Y+18	; 0x12
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_displayCharacter+0x7ac>
    2884:	9a 8b       	std	Y+18, r25	; 0x12
    2886:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8b 89       	ldd	r24, Y+19	; 0x13
    288a:	9c 89       	ldd	r25, Y+20	; 0x14
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9c 8b       	std	Y+20, r25	; 0x14
    2890:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <LCD_displayCharacter+0x7a0>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6d 89       	ldd	r22, Y+21	; 0x15
    289e:	7e 89       	ldd	r23, Y+22	; 0x16
    28a0:	8f 89       	ldd	r24, Y+23	; 0x17
    28a2:	98 8d       	ldd	r25, Y+24	; 0x18
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9c 8b       	std	Y+20, r25	; 0x14
    28ae:	8b 8b       	std	Y+19, r24	; 0x13
    28b0:	8b 89       	ldd	r24, Y+19	; 0x13
    28b2:	9c 89       	ldd	r25, Y+20	; 0x14
    28b4:	98 8b       	std	Y+16, r25	; 0x10
    28b6:	8f 87       	std	Y+15, r24	; 0x0f
    28b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ba:	98 89       	ldd	r25, Y+16	; 0x10
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_displayCharacter+0x7e8>
    28c0:	98 8b       	std	Y+16, r25	; 0x10
    28c2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28c4:	80 e0       	ldi	r24, 0x00	; 0
    28c6:	62 e0       	ldi	r22, 0x02	; 2
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 09 08 	call	0x1012	; 0x1012 <GPIO_writePin>
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	a0 e8       	ldi	r26, 0x80	; 128
    28d4:	bf e3       	ldi	r27, 0x3F	; 63
    28d6:	8b 87       	std	Y+11, r24	; 0x0b
    28d8:	9c 87       	std	Y+12, r25	; 0x0c
    28da:	ad 87       	std	Y+13, r26	; 0x0d
    28dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	4a e7       	ldi	r20, 0x7A	; 122
    28ec:	55 e4       	ldi	r21, 0x45	; 69
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	8f 83       	std	Y+7, r24	; 0x07
    28f8:	98 87       	std	Y+8, r25	; 0x08
    28fa:	a9 87       	std	Y+9, r26	; 0x09
    28fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2900:	78 85       	ldd	r23, Y+8	; 0x08
    2902:	89 85       	ldd	r24, Y+9	; 0x09
    2904:	9a 85       	ldd	r25, Y+10	; 0x0a
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2912:	88 23       	and	r24, r24
    2914:	2c f4       	brge	.+10     	; 0x2920 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	9e 83       	std	Y+6, r25	; 0x06
    291c:	8d 83       	std	Y+5, r24	; 0x05
    291e:	3f c0       	rjmp	.+126    	; 0x299e <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2920:	6f 81       	ldd	r22, Y+7	; 0x07
    2922:	78 85       	ldd	r23, Y+8	; 0x08
    2924:	89 85       	ldd	r24, Y+9	; 0x09
    2926:	9a 85       	ldd	r25, Y+10	; 0x0a
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	3f ef       	ldi	r19, 0xFF	; 255
    292c:	4f e7       	ldi	r20, 0x7F	; 127
    292e:	57 e4       	ldi	r21, 0x47	; 71
    2930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2934:	18 16       	cp	r1, r24
    2936:	4c f5       	brge	.+82     	; 0x298a <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2938:	6b 85       	ldd	r22, Y+11	; 0x0b
    293a:	7c 85       	ldd	r23, Y+12	; 0x0c
    293c:	8d 85       	ldd	r24, Y+13	; 0x0d
    293e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e2       	ldi	r20, 0x20	; 32
    2946:	51 e4       	ldi	r21, 0x41	; 65
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	9e 83       	std	Y+6, r25	; 0x06
    295e:	8d 83       	std	Y+5, r24	; 0x05
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <LCD_displayCharacter+0x8ac>
    2962:	80 e9       	ldi	r24, 0x90	; 144
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	9c 83       	std	Y+4, r25	; 0x04
    2968:	8b 83       	std	Y+3, r24	; 0x03
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	f1 f7       	brne	.-4      	; 0x296e <LCD_displayCharacter+0x89a>
    2972:	9c 83       	std	Y+4, r25	; 0x04
    2974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	9e 83       	std	Y+6, r25	; 0x06
    297e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	00 97       	sbiw	r24, 0x00	; 0
    2986:	69 f7       	brne	.-38     	; 0x2962 <LCD_displayCharacter+0x88e>
    2988:	14 c0       	rjmp	.+40     	; 0x29b2 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298a:	6f 81       	ldd	r22, Y+7	; 0x07
    298c:	78 85       	ldd	r23, Y+8	; 0x08
    298e:	89 85       	ldd	r24, Y+9	; 0x09
    2990:	9a 85       	ldd	r25, Y+10	; 0x0a
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9e 83       	std	Y+6, r25	; 0x06
    299c:	8d 83       	std	Y+5, r24	; 0x05
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <LCD_displayCharacter+0x8d6>
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    29b2:	cd 59       	subi	r28, 0x9D	; 157
    29b4:	df 4f       	sbci	r29, 0xFF	; 255
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	08 95       	ret

000029ca <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	00 d0       	rcall	.+0      	; 0x29d0 <LCD_displayString+0x6>
    29d0:	0f 92       	push	r0
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	9b 83       	std	Y+3, r25	; 0x03
    29d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29da:	19 82       	std	Y+1, r1	; 0x01
    29dc:	0e c0       	rjmp	.+28     	; 0x29fa <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	28 2f       	mov	r18, r24
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	9b 81       	ldd	r25, Y+3	; 0x03
    29e8:	fc 01       	movw	r30, r24
    29ea:	e2 0f       	add	r30, r18
    29ec:	f3 1f       	adc	r31, r19
    29ee:	80 81       	ld	r24, Z
    29f0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <LCD_displayCharacter>
		i++;
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	8f 5f       	subi	r24, 0xFF	; 255
    29f8:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	28 2f       	mov	r18, r24
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	fc 01       	movw	r30, r24
    2a06:	e2 0f       	add	r30, r18
    2a08:	f3 1f       	adc	r31, r19
    2a0a:	80 81       	ld	r24, Z
    2a0c:	88 23       	and	r24, r24
    2a0e:	39 f7       	brne	.-50     	; 0x29de <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a1c:	df 93       	push	r29
    2a1e:	cf 93       	push	r28
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <LCD_moveCursor+0x6>
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <LCD_moveCursor+0x8>
    2a24:	0f 92       	push	r0
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	8a 83       	std	Y+2, r24	; 0x02
    2a2c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	3d 83       	std	Y+5, r19	; 0x05
    2a36:	2c 83       	std	Y+4, r18	; 0x04
    2a38:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a3c:	81 30       	cpi	r24, 0x01	; 1
    2a3e:	91 05       	cpc	r25, r1
    2a40:	c1 f0       	breq	.+48     	; 0x2a72 <LCD_moveCursor+0x56>
    2a42:	2c 81       	ldd	r18, Y+4	; 0x04
    2a44:	3d 81       	ldd	r19, Y+5	; 0x05
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <LCD_moveCursor+0x3a>
    2a4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	61 f0       	breq	.+24     	; 0x2a6c <LCD_moveCursor+0x50>
    2a54:	19 c0       	rjmp	.+50     	; 0x2a88 <LCD_moveCursor+0x6c>
    2a56:	2c 81       	ldd	r18, Y+4	; 0x04
    2a58:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5a:	22 30       	cpi	r18, 0x02	; 2
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	69 f0       	breq	.+26     	; 0x2a7a <LCD_moveCursor+0x5e>
    2a60:	8c 81       	ldd	r24, Y+4	; 0x04
    2a62:	9d 81       	ldd	r25, Y+5	; 0x05
    2a64:	83 30       	cpi	r24, 0x03	; 3
    2a66:	91 05       	cpc	r25, r1
    2a68:	61 f0       	breq	.+24     	; 0x2a82 <LCD_moveCursor+0x66>
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	0b c0       	rjmp	.+22     	; 0x2a88 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	80 5c       	subi	r24, 0xC0	; 192
    2a76:	89 83       	std	Y+1, r24	; 0x01
    2a78:	07 c0       	rjmp	.+14     	; 0x2a88 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	80 5f       	subi	r24, 0xF0	; 240
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	80 5b       	subi	r24, 0xB0	; 176
    2a86:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	80 68       	ori	r24, 0x80	; 128
    2a8c:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>
}
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <LCD_displayStringRowColumn+0x6>
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <LCD_displayStringRowColumn+0x8>
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	6a 83       	std	Y+2, r22	; 0x02
    2ab0:	5c 83       	std	Y+4, r21	; 0x04
    2ab2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    2ab8:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
}
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	62 97       	sbiw	r28, 0x12	; 18
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	9a 8b       	std	Y+18, r25	; 0x12
    2ae8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2aea:	89 89       	ldd	r24, Y+17	; 0x11
    2aec:	9a 89       	ldd	r25, Y+18	; 0x12
    2aee:	9e 01       	movw	r18, r28
    2af0:	2f 5f       	subi	r18, 0xFF	; 255
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	b9 01       	movw	r22, r18
    2af6:	4a e0       	ldi	r20, 0x0A	; 10
    2af8:	50 e0       	ldi	r21, 0x00	; 0
    2afa:	0e 94 80 18 	call	0x3100	; 0x3100 <itoa>
   LCD_displayString(buff); /* Display the string */
    2afe:	ce 01       	movw	r24, r28
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	0e 94 e5 14 	call	0x29ca	; 0x29ca <LCD_displayString>
}
    2b06:	62 96       	adiw	r28, 0x12	; 18
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	cd b7       	in	r28, 0x3d	; 61
    2b1e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>
}
    2b26:	cf 91       	pop	r28
    2b28:	df 91       	pop	r29
    2b2a:	08 95       	ret

00002b2c <LCD_Add_Custom_Char>:

void LCD_Add_Custom_Char (uint8 loc, uint8 *msg)
{
    2b2c:	df 93       	push	r29
    2b2e:	cf 93       	push	r28
    2b30:	00 d0       	rcall	.+0      	; 0x2b32 <LCD_Add_Custom_Char+0x6>
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <LCD_Add_Custom_Char+0x8>
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	8a 83       	std	Y+2, r24	; 0x02
    2b3a:	7c 83       	std	Y+4, r23	; 0x04
    2b3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 i;
	if(loc<8)
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	88 30       	cpi	r24, 0x08	; 8
    2b42:	f8 f4       	brcc	.+62     	; 0x2b82 <LCD_Add_Custom_Char+0x56>
	{
		LCD_sendCommand(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	08 96       	adiw	r24, 0x08	; 8
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	0e 94 ef 0b 	call	0x17de	; 0x17de <LCD_sendCommand>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    2b5c:	19 82       	std	Y+1, r1	; 0x01
    2b5e:	0e c0       	rjmp	.+28     	; 0x2b7c <LCD_Add_Custom_Char+0x50>
		LCD_displayCharacter(msg[i]);
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	80 81       	ld	r24, Z
    2b72:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <LCD_displayCharacter>
{
	uint8 i;
	if(loc<8)
	{
		LCD_sendCommand(0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	8f 5f       	subi	r24, 0xFF	; 255
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	88 30       	cpi	r24, 0x08	; 8
    2b80:	78 f3       	brcs	.-34     	; 0x2b60 <LCD_Add_Custom_Char+0x34>
		LCD_displayCharacter(msg[i]);
	}
}
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	cf 91       	pop	r28
    2b8c:	df 91       	pop	r29
    2b8e:	08 95       	ret

00002b90 <PWM_Timer0_Generate>:
#include "pwm.h"
#include "gpio.h" /* to use GPIO_setupPinDirection function*/

/* function responsible for generate pwm signal using timer0 with different duty cycles*/
void PWM_Timer0_Generate(uint8 duty_cycle)
{
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	df 93       	push	r29
    2b96:	cf 93       	push	r28
    2b98:	0f 92       	push	r0
    2b9a:	cd b7       	in	r28, 0x3d	; 61
    2b9c:	de b7       	in	r29, 0x3e	; 62
    2b9e:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; // Set Timer Initial Value to 0
    2ba0:	e2 e5       	ldi	r30, 0x52	; 82
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	10 82       	st	Z, r1

	if(duty_cycle <100)
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	84 36       	cpi	r24, 0x64	; 100
    2baa:	c0 f4       	brcc	.+48     	; 0x2bdc <PWM_Timer0_Generate+0x4c>
		OCR0  = (uint8)( ((uint32)duty_cycle*256)/100 ); //Set Compare value
    2bac:	0c e5       	ldi	r16, 0x5C	; 92
    2bae:	10 e0       	ldi	r17, 0x00	; 0
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	88 2f       	mov	r24, r24
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 e0       	ldi	r26, 0x00	; 0
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	ba 2f       	mov	r27, r26
    2bbc:	a9 2f       	mov	r26, r25
    2bbe:	98 2f       	mov	r25, r24
    2bc0:	88 27       	eor	r24, r24
    2bc2:	24 e6       	ldi	r18, 0x64	; 100
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 27 18 	call	0x304e	; 0x304e <__udivmodsi4>
    2bd2:	da 01       	movw	r26, r20
    2bd4:	c9 01       	movw	r24, r18
    2bd6:	f8 01       	movw	r30, r16
    2bd8:	80 83       	st	Z, r24
    2bda:	07 c0       	rjmp	.+14     	; 0x2bea <PWM_Timer0_Generate+0x5a>
	else if (duty_cycle ==100)
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	84 36       	cpi	r24, 0x64	; 100
    2be0:	21 f4       	brne	.+8      	; 0x2bea <PWM_Timer0_Generate+0x5a>
		OCR0=255; /*to avoid the overflow (256 exceed the range of uint8)*/
    2be2:	ec e5       	ldi	r30, 0x5C	; 92
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	8f ef       	ldi	r24, 0xFF	; 255
    2be8:	80 83       	st	Z, r24

	GPIO_setupPinDirection(pwm0_PORT_ID,pwm0_PIN_ID,PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	63 e0       	ldi	r22, 0x03	; 3
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2bf4:	e3 e5       	ldi	r30, 0x53	; 83
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	8a e6       	ldi	r24, 0x6A	; 106
    2bfa:	80 83       	st	Z, r24
}
    2bfc:	0f 90       	pop	r0
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	1f 91       	pop	r17
    2c04:	0f 91       	pop	r16
    2c06:	08 95       	ret

00002c08 <PWM_Timer2_Generate>:

/* function responsible for generate pwm signal using timer2 with different duty cycles*/
void PWM_Timer2_Generate(uint8 duty_cycle)
{
    2c08:	0f 93       	push	r16
    2c0a:	1f 93       	push	r17
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	0f 92       	push	r0
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	89 83       	std	Y+1, r24	; 0x01

	TCNT2 = 0; // Set Timer Initial Value to 0
    2c18:	e4 e4       	ldi	r30, 0x44	; 68
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	10 82       	st	Z, r1

	if(duty_cycle <100)
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	84 36       	cpi	r24, 0x64	; 100
    2c22:	c0 f4       	brcc	.+48     	; 0x2c54 <PWM_Timer2_Generate+0x4c>
		OCR2  = (uint8)( ((uint32)duty_cycle*256)/100 ); //Set Compare value
    2c24:	03 e4       	ldi	r16, 0x43	; 67
    2c26:	10 e0       	ldi	r17, 0x00	; 0
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	88 2f       	mov	r24, r24
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	a0 e0       	ldi	r26, 0x00	; 0
    2c30:	b0 e0       	ldi	r27, 0x00	; 0
    2c32:	ba 2f       	mov	r27, r26
    2c34:	a9 2f       	mov	r26, r25
    2c36:	98 2f       	mov	r25, r24
    2c38:	88 27       	eor	r24, r24
    2c3a:	24 e6       	ldi	r18, 0x64	; 100
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e0       	ldi	r20, 0x00	; 0
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 27 18 	call	0x304e	; 0x304e <__udivmodsi4>
    2c4a:	da 01       	movw	r26, r20
    2c4c:	c9 01       	movw	r24, r18
    2c4e:	f8 01       	movw	r30, r16
    2c50:	80 83       	st	Z, r24
    2c52:	07 c0       	rjmp	.+14     	; 0x2c62 <PWM_Timer2_Generate+0x5a>
	else if (duty_cycle ==100)
    2c54:	89 81       	ldd	r24, Y+1	; 0x01
    2c56:	84 36       	cpi	r24, 0x64	; 100
    2c58:	21 f4       	brne	.+8      	; 0x2c62 <PWM_Timer2_Generate+0x5a>
		OCR2=255; /*to avoid the overflow (256 exceed the range of uint8)*/
    2c5a:	e3 e4       	ldi	r30, 0x43	; 67
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	8f ef       	ldi	r24, 0xFF	; 255
    2c60:	80 83       	st	Z, r24

	GPIO_setupPinDirection(pwm2_PORT_ID,pwm2_PIN_ID,PIN_OUTPUT); // Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC
    2c62:	83 e0       	ldi	r24, 0x03	; 3
    2c64:	67 e0       	ldi	r22, 0x07	; 7
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM21=1 & WGM20=1
	 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
	 * 4. clock = F_CPU/8 CS20=0 CS21=1 CS22=0
	 */
	TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (1<<CS21);
    2c6c:	e5 e4       	ldi	r30, 0x45	; 69
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	8a e6       	ldi	r24, 0x6A	; 106
    2c72:	80 83       	st	Z, r24
}
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	08 95       	ret

00002c80 <PWM_vInit_T1_FastMode>:

/*Function responsible for initializing the timer1 for pwm in fast mode */
void PWM_vInit_T1_FastMode()
{
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
	
		//we made it CLR on compare to get the desired correct signal for servo
		// Make OC1A pin as output
		GPIO_setupPinDirection(PORTD_ID, PIN_NO_5,OUTPUT);
    2c88:	83 e0       	ldi	r24, 0x03	; 3
    2c8a:	65 e0       	ldi	r22, 0x05	; 5
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <GPIO_setupPinDirection>
		//checked  //Set timer1 count zero
		TCNT1 = 0 ;			
    2c92:	ec e4       	ldi	r30, 0x4C	; 76
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	11 82       	std	Z+1, r1	; 0x01
    2c98:	10 82       	st	Z, r1
		//for frequency 50Hz  // Set TOP count for timer1 in ICR1 register
		ICR1 = 2499 ; 
    2c9a:	e6 e4       	ldi	r30, 0x46	; 70
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	83 ec       	ldi	r24, 0xC3	; 195
    2ca0:	99 e0       	ldi	r25, 0x09	; 9
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	80 83       	st	Z, r24
		//Set Fast PWM, TOP in ICR1, Clr OC1A on compare match, Clk/64
		TCCR1A = (1<<PIN_NO_7) |  (1<<PIN_NO_1) ;
    2ca6:	ef e4       	ldi	r30, 0x4F	; 79
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	82 e8       	ldi	r24, 0x82	; 130
    2cac:	80 83       	st	Z, r24
		TCCR1B = (1<<PIN_NO_3) | (1<<PIN_NO_4) | (1<<PIN_NO_0) | (1<<PIN_NO_1) ;
    2cae:	ee e4       	ldi	r30, 0x4E	; 78
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	8b e1       	ldi	r24, 0x1B	; 27
    2cb4:	80 83       	st	Z, r24

	
}
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <PWM_vSetValue_ICR1_T1_Manual>:

/*Function responsible for assining a value in ICR1 REG*/
void PWM_vSetValue_ICR1_T1_Manual(uint16 copy_u16Value)
{
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <PWM_vSetValue_ICR1_T1_Manual+0x6>
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	9a 83       	std	Y+2, r25	; 0x02
    2cc8:	89 83       	std	Y+1, r24	; 0x01
	
	ICR1 = copy_u16Value ;
    2cca:	e6 e4       	ldi	r30, 0x46	; 70
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	91 83       	std	Z+1, r25	; 0x01
    2cd4:	80 83       	st	Z, r24
	
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <PWM_vSetValue_OCR1A_T1_Manual>:

/*Function responsible for assining a value in OCR1A REG */
void PWM_vSetValue_OCR1A_T1_Manual(uint16 copy_u16Value)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <PWM_vSetValue_OCR1A_T1_Manual+0x6>
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	9a 83       	std	Y+2, r25	; 0x02
    2cec:	89 83       	std	Y+1, r24	; 0x01
		OCR1A = copy_u16Value ;
    2cee:	ea e4       	ldi	r30, 0x4A	; 74
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf6:	91 83       	std	Z+1, r25	; 0x01
    2cf8:	80 83       	st	Z, r24
}
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <Timer1_Fast_PWM_Init>:

void Timer1_Fast_PWM_Init(unsigned short duty_cycle)
{
    2d04:	df 93       	push	r29
    2d06:	cf 93       	push	r28
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <Timer1_Fast_PWM_Init+0x6>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = 0;		/* Set timer1 initial count to zero */
    2d12:	ec e4       	ldi	r30, 0x4C	; 76
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	11 82       	std	Z+1, r1	; 0x01
    2d18:	10 82       	st	Z, r1
	ICR1 = 2499;	/* Set TOP count for timer1 in ICR1 register */
    2d1a:	e6 e4       	ldi	r30, 0x46	; 70
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	83 ec       	ldi	r24, 0xC3	; 195
    2d20:	99 e0       	ldi	r25, 0x09	; 9
    2d22:	91 83       	std	Z+1, r25	; 0x01
    2d24:	80 83       	st	Z, r24

	OCR1A = duty_cycle; /* Set the compare value */
    2d26:	ea e4       	ldi	r30, 0x4A	; 74
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	80 83       	st	Z, r24
     * 1. Clear OC1A on compare match (non inverting mode) COM1A1=1 COM1A0=0
     * 2. Disconnect OC1B  COM1B0=0 COM1B1=0
     * 3. FOC1A=0 FOC1B=0 because these bits are only active in case non-pwm mode
     * 4. Fast Pwm Mode with the TOP in ICR1 WGM10=0 WGM11=1 (Mode Number 14)
	 */
	TCCR1A = (1<<WGM11) | (1<<COM1A1);
    2d32:	ef e4       	ldi	r30, 0x4F	; 79
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	82 e8       	ldi	r24, 0x82	; 130
    2d38:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. Fast Pwm Mode with the TOP in ICR1 WGM12=1 WGM13=1 (Mode Number 14)
	 * 2. Prescaler = F_CPU/64
     */
	TCCR1B = (1<<WGM12) | (1<<WGM13) | (1<<CS10) | (1<<CS11);
    2d3a:	ee e4       	ldi	r30, 0x4E	; 78
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	8b e1       	ldi	r24, 0x1B	; 27
    2d40:	80 83       	st	Z, r24
}
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
    2d46:	cf 91       	pop	r28
    2d48:	df 91       	pop	r29
    2d4a:	08 95       	ret

00002d4c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <UART_init+0x6>
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <UART_init+0x8>
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	9c 83       	std	Y+4, r25	; 0x04
    2d5a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2d5c:	1a 82       	std	Y+2, r1	; 0x02
    2d5e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2d60:	eb e2       	ldi	r30, 0x2B	; 43
    2d62:	f0 e0       	ldi	r31, 0x00	; 0
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	80 83       	st	Z, r24

	/*enable the transmitter and the reciever */
	UCSRB |= (1<<RXEN) | (1<<TXEN);
    2d68:	aa e2       	ldi	r26, 0x2A	; 42
    2d6a:	b0 e0       	ldi	r27, 0x00	; 0
    2d6c:	ea e2       	ldi	r30, 0x2A	; 42
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	88 61       	ori	r24, 0x18	; 24
    2d74:	8c 93       	st	X, r24

	/*insert the character size bit in UCSZ2 */
	UCSRB=(UCSRB & 0xFB)|(Config_Ptr->bit_data &0x04);
    2d76:	aa e2       	ldi	r26, 0x2A	; 42
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	ea e2       	ldi	r30, 0x2A	; 42
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	98 2f       	mov	r25, r24
    2d82:	9b 7f       	andi	r25, 0xFB	; 251
    2d84:	eb 81       	ldd	r30, Y+3	; 0x03
    2d86:	fc 81       	ldd	r31, Y+4	; 0x04
    2d88:	80 81       	ld	r24, Z
    2d8a:	84 70       	andi	r24, 0x04	; 4
    2d8c:	89 2b       	or	r24, r25
    2d8e:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC*/
	UCSRC |= (1<<URSEL);
    2d90:	a0 e4       	ldi	r26, 0x40	; 64
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	e0 e4       	ldi	r30, 0x40	; 64
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	80 68       	ori	r24, 0x80	; 128
    2d9c:	8c 93       	st	X, r24

	/*insert the character size bits in UCSZ1 and UCSZ0*/
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data &0x03)<<1);
    2d9e:	a0 e4       	ldi	r26, 0x40	; 64
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	e0 e4       	ldi	r30, 0x40	; 64
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	28 2f       	mov	r18, r24
    2daa:	29 7f       	andi	r18, 0xF9	; 249
    2dac:	eb 81       	ldd	r30, Y+3	; 0x03
    2dae:	fc 81       	ldd	r31, Y+4	; 0x04
    2db0:	80 81       	ld	r24, Z
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	83 70       	andi	r24, 0x03	; 3
    2db8:	90 70       	andi	r25, 0x00	; 0
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	82 2b       	or	r24, r18
    2dc0:	8c 93       	st	X, r24

	/*insert the parity mode bits in UPM1 and UPM0*/
	UCSRC=(UCSRC&0xCF)|(Config_Ptr->parity <<4);
    2dc2:	a0 e4       	ldi	r26, 0x40	; 64
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e0 e4       	ldi	r30, 0x40	; 64
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	28 2f       	mov	r18, r24
    2dce:	2f 7c       	andi	r18, 0xCF	; 207
    2dd0:	eb 81       	ldd	r30, Y+3	; 0x03
    2dd2:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd4:	81 81       	ldd	r24, Z+1	; 0x01
    2dd6:	88 2f       	mov	r24, r24
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	82 95       	swap	r24
    2ddc:	92 95       	swap	r25
    2dde:	90 7f       	andi	r25, 0xF0	; 240
    2de0:	98 27       	eor	r25, r24
    2de2:	80 7f       	andi	r24, 0xF0	; 240
    2de4:	98 27       	eor	r25, r24
    2de6:	82 2b       	or	r24, r18
    2de8:	8c 93       	st	X, r24

	/*insert number of stop bits in USBS*/
	UCSRC=(UCSRC&0xF7)|(Config_Ptr->stop_bit <<3);
    2dea:	a0 e4       	ldi	r26, 0x40	; 64
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e0 e4       	ldi	r30, 0x40	; 64
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	28 2f       	mov	r18, r24
    2df6:	27 7f       	andi	r18, 0xF7	; 247
    2df8:	eb 81       	ldd	r30, Y+3	; 0x03
    2dfa:	fc 81       	ldd	r31, Y+4	; 0x04
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	88 2f       	mov	r24, r24
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	88 0f       	add	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	82 2b       	or	r24, r18
    2e10:	8c 93       	st	X, r24
	
	if(Config_Ptr->bit_data ==Nine_Bits)
    2e12:	eb 81       	ldd	r30, Y+3	; 0x03
    2e14:	fc 81       	ldd	r31, Y+4	; 0x04
    2e16:	80 81       	ld	r24, Z
    2e18:	87 30       	cpi	r24, 0x07	; 7
    2e1a:	39 f4       	brne	.+14     	; 0x2e2a <UART_init+0xde>
	{
		/*Enable reception and transmission of 9-bit serial data*/
		UCSRB |= (1<<RXB8)|(1<<TXB8);
    2e1c:	aa e2       	ldi	r26, 0x2A	; 42
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	ea e2       	ldi	r30, 0x2A	; 42
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	83 60       	ori	r24, 0x03	; 3
    2e28:	8c 93       	st	X, r24
	}
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->UART_BaudRate * 8UL))) - 1);
    2e2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e2e:	83 81       	ldd	r24, Z+3	; 0x03
    2e30:	94 81       	ldd	r25, Z+4	; 0x04
    2e32:	a5 81       	ldd	r26, Z+5	; 0x05
    2e34:	b6 81       	ldd	r27, Z+6	; 0x06
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	aa 1f       	adc	r26, r26
    2e3c:	bb 1f       	adc	r27, r27
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	aa 1f       	adc	r26, r26
    2e44:	bb 1f       	adc	r27, r27
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	aa 1f       	adc	r26, r26
    2e4c:	bb 1f       	adc	r27, r27
    2e4e:	9c 01       	movw	r18, r24
    2e50:	ad 01       	movw	r20, r26
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	94 e2       	ldi	r25, 0x24	; 36
    2e56:	a4 ef       	ldi	r26, 0xF4	; 244
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 27 18 	call	0x304e	; 0x304e <__udivmodsi4>
    2e62:	da 01       	movw	r26, r20
    2e64:	c9 01       	movw	r24, r18
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2e6c:	e0 e4       	ldi	r30, 0x40	; 64
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	89 2f       	mov	r24, r25
    2e76:	99 27       	eor	r25, r25
    2e78:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2e7a:	e9 e2       	ldi	r30, 0x29	; 41
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	80 83       	st	Z, r24
}
    2e82:	0f 90       	pop	r0
    2e84:	0f 90       	pop	r0
    2e86:	0f 90       	pop	r0
    2e88:	0f 90       	pop	r0
    2e8a:	cf 91       	pop	r28
    2e8c:	df 91       	pop	r29
    2e8e:	08 95       	ret

00002e90 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	0f 92       	push	r0
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2e9c:	eb e2       	ldi	r30, 0x2B	; 43
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	88 2f       	mov	r24, r24
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	80 72       	andi	r24, 0x20	; 32
    2ea8:	90 70       	andi	r25, 0x00	; 0
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	b9 f3       	breq	.-18     	; 0x2e9c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2eae:	ec e2       	ldi	r30, 0x2C	; 44
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2eb6:	0f 90       	pop	r0
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ebe:	df 93       	push	r29
    2ec0:	cf 93       	push	r28
    2ec2:	cd b7       	in	r28, 0x3d	; 61
    2ec4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ec6:	eb e2       	ldi	r30, 0x2B	; 43
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	88 23       	and	r24, r24
    2ece:	dc f7       	brge	.-10     	; 0x2ec6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2ed0:	ec e2       	ldi	r30, 0x2C	; 44
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
}
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <UART_sendString+0x6>
    2ee2:	0f 92       	push	r0
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	9b 83       	std	Y+3, r25	; 0x03
    2eea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eec:	19 82       	std	Y+1, r1	; 0x01
    2eee:	0e c0       	rjmp	.+28     	; 0x2f0c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    2efa:	fc 01       	movw	r30, r24
    2efc:	e2 0f       	add	r30, r18
    2efe:	f3 1f       	adc	r31, r19
    2f00:	80 81       	ld	r24, Z
    2f02:	0e 94 48 17 	call	0x2e90	; 0x2e90 <UART_sendByte>
		i++;
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	8f 5f       	subi	r24, 0xFF	; 255
    2f0a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f0c:	89 81       	ldd	r24, Y+1	; 0x01
    2f0e:	28 2f       	mov	r18, r24
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	9b 81       	ldd	r25, Y+3	; 0x03
    2f16:	fc 01       	movw	r30, r24
    2f18:	e2 0f       	add	r30, r18
    2f1a:	f3 1f       	adc	r31, r19
    2f1c:	80 81       	ld	r24, Z
    2f1e:	88 23       	and	r24, r24
    2f20:	39 f7       	brne	.-50     	; 0x2ef0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	cf 91       	pop	r28
    2f2a:	df 91       	pop	r29
    2f2c:	08 95       	ret

00002f2e <UART_sendArray>:
void UART_sendArray(const uint8*arr,uint8 size)
{
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <UART_sendArray+0x6>
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <UART_sendArray+0x8>
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	9b 83       	std	Y+3, r25	; 0x03
    2f3c:	8a 83       	std	Y+2, r24	; 0x02
    2f3e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    2f40:	19 82       	std	Y+1, r1	; 0x01
    2f42:	0e c0       	rjmp	.+28     	; 0x2f60 <UART_sendArray+0x32>
	{
		UART_sendByte(arr[i]);
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	fc 01       	movw	r30, r24
    2f50:	e2 0f       	add	r30, r18
    2f52:	f3 1f       	adc	r31, r19
    2f54:	80 81       	ld	r24, Z
    2f56:	0e 94 48 17 	call	0x2e90	; 0x2e90 <UART_sendByte>
	*******************************************************************/
}
void UART_sendArray(const uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	89 83       	std	Y+1, r24	; 0x01
    2f60:	99 81       	ldd	r25, Y+1	; 0x01
    2f62:	8c 81       	ldd	r24, Y+4	; 0x04
    2f64:	98 17       	cp	r25, r24
    2f66:	70 f3       	brcs	.-36     	; 0x2f44 <UART_sendArray+0x16>
	{
		UART_sendByte(arr[i]);
	}
}
    2f68:	0f 90       	pop	r0
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	cf 91       	pop	r28
    2f72:	df 91       	pop	r29
    2f74:	08 95       	ret

00002f76 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <UART_receiveString+0xa>
    2f80:	0f 92       	push	r0
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	9b 83       	std	Y+3, r25	; 0x03
    2f88:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f8a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	9b 81       	ldd	r25, Y+3	; 0x03
    2f96:	8c 01       	movw	r16, r24
    2f98:	02 0f       	add	r16, r18
    2f9a:	13 1f       	adc	r17, r19
    2f9c:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <UART_recieveByte>
    2fa0:	f8 01       	movw	r30, r16
    2fa2:	80 83       	st	Z, r24
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	8f 5f       	subi	r24, 0xFF	; 255
    2faa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	28 2f       	mov	r18, r24
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb6:	8c 01       	movw	r16, r24
    2fb8:	02 0f       	add	r16, r18
    2fba:	13 1f       	adc	r17, r19
    2fbc:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <UART_recieveByte>
    2fc0:	f8 01       	movw	r30, r16
    2fc2:	80 83       	st	Z, r24

	/* Receive the first byte (we can improve this part by dowhile)*/
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	8a 81       	ldd	r24, Y+2	; 0x02
    2fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fce:	fc 01       	movw	r30, r24
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f3 1f       	adc	r31, r19
    2fd4:	80 81       	ld	r24, Z
    2fd6:	83 32       	cpi	r24, 0x23	; 35
    2fd8:	31 f7       	brne	.-52     	; 0x2fa6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	28 2f       	mov	r18, r24
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	e2 0f       	add	r30, r18
    2fe8:	f3 1f       	adc	r31, r19
    2fea:	10 82       	st	Z, r1
}
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	08 95       	ret

00002ffc <UART_receiveArray>:
void UART_receiveArray(uint8*arr,uint8 size)
{
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <UART_receiveArray+0xa>
    3006:	00 d0       	rcall	.+0      	; 0x3008 <UART_receiveArray+0xc>
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	9b 83       	std	Y+3, r25	; 0x03
    300e:	8a 83       	std	Y+2, r24	; 0x02
    3010:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
    3012:	19 82       	std	Y+1, r1	; 0x01
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <UART_receiveArray+0x38>
	{
		arr[i]=UART_recieveByte();
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	9b 81       	ldd	r25, Y+3	; 0x03
    3020:	8c 01       	movw	r16, r24
    3022:	02 0f       	add	r16, r18
    3024:	13 1f       	adc	r17, r19
    3026:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <UART_recieveByte>
    302a:	f8 01       	movw	r30, r16
    302c:	80 83       	st	Z, r24
	Str[i] = '\0';
}
void UART_receiveArray(uint8*arr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	8f 5f       	subi	r24, 0xFF	; 255
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	99 81       	ldd	r25, Y+1	; 0x01
    3036:	8c 81       	ldd	r24, Y+4	; 0x04
    3038:	98 17       	cp	r25, r24
    303a:	68 f3       	brcs	.-38     	; 0x3016 <UART_receiveArray+0x1a>
	{
		arr[i]=UART_recieveByte();
	}

}
    303c:	0f 90       	pop	r0
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	08 95       	ret

0000304e <__udivmodsi4>:
    304e:	a1 e2       	ldi	r26, 0x21	; 33
    3050:	1a 2e       	mov	r1, r26
    3052:	aa 1b       	sub	r26, r26
    3054:	bb 1b       	sub	r27, r27
    3056:	fd 01       	movw	r30, r26
    3058:	0d c0       	rjmp	.+26     	; 0x3074 <__udivmodsi4_ep>

0000305a <__udivmodsi4_loop>:
    305a:	aa 1f       	adc	r26, r26
    305c:	bb 1f       	adc	r27, r27
    305e:	ee 1f       	adc	r30, r30
    3060:	ff 1f       	adc	r31, r31
    3062:	a2 17       	cp	r26, r18
    3064:	b3 07       	cpc	r27, r19
    3066:	e4 07       	cpc	r30, r20
    3068:	f5 07       	cpc	r31, r21
    306a:	20 f0       	brcs	.+8      	; 0x3074 <__udivmodsi4_ep>
    306c:	a2 1b       	sub	r26, r18
    306e:	b3 0b       	sbc	r27, r19
    3070:	e4 0b       	sbc	r30, r20
    3072:	f5 0b       	sbc	r31, r21

00003074 <__udivmodsi4_ep>:
    3074:	66 1f       	adc	r22, r22
    3076:	77 1f       	adc	r23, r23
    3078:	88 1f       	adc	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	1a 94       	dec	r1
    307e:	69 f7       	brne	.-38     	; 0x305a <__udivmodsi4_loop>
    3080:	60 95       	com	r22
    3082:	70 95       	com	r23
    3084:	80 95       	com	r24
    3086:	90 95       	com	r25
    3088:	9b 01       	movw	r18, r22
    308a:	ac 01       	movw	r20, r24
    308c:	bd 01       	movw	r22, r26
    308e:	cf 01       	movw	r24, r30
    3090:	08 95       	ret

00003092 <__prologue_saves__>:
    3092:	2f 92       	push	r2
    3094:	3f 92       	push	r3
    3096:	4f 92       	push	r4
    3098:	5f 92       	push	r5
    309a:	6f 92       	push	r6
    309c:	7f 92       	push	r7
    309e:	8f 92       	push	r8
    30a0:	9f 92       	push	r9
    30a2:	af 92       	push	r10
    30a4:	bf 92       	push	r11
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	0f 93       	push	r16
    30b0:	1f 93       	push	r17
    30b2:	cf 93       	push	r28
    30b4:	df 93       	push	r29
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	ca 1b       	sub	r28, r26
    30bc:	db 0b       	sbc	r29, r27
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	f8 94       	cli
    30c2:	de bf       	out	0x3e, r29	; 62
    30c4:	0f be       	out	0x3f, r0	; 63
    30c6:	cd bf       	out	0x3d, r28	; 61
    30c8:	09 94       	ijmp

000030ca <__epilogue_restores__>:
    30ca:	2a 88       	ldd	r2, Y+18	; 0x12
    30cc:	39 88       	ldd	r3, Y+17	; 0x11
    30ce:	48 88       	ldd	r4, Y+16	; 0x10
    30d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30da:	aa 84       	ldd	r10, Y+10	; 0x0a
    30dc:	b9 84       	ldd	r11, Y+9	; 0x09
    30de:	c8 84       	ldd	r12, Y+8	; 0x08
    30e0:	df 80       	ldd	r13, Y+7	; 0x07
    30e2:	ee 80       	ldd	r14, Y+6	; 0x06
    30e4:	fd 80       	ldd	r15, Y+5	; 0x05
    30e6:	0c 81       	ldd	r16, Y+4	; 0x04
    30e8:	1b 81       	ldd	r17, Y+3	; 0x03
    30ea:	aa 81       	ldd	r26, Y+2	; 0x02
    30ec:	b9 81       	ldd	r27, Y+1	; 0x01
    30ee:	ce 0f       	add	r28, r30
    30f0:	d1 1d       	adc	r29, r1
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	ed 01       	movw	r28, r26
    30fe:	08 95       	ret

00003100 <itoa>:
    3100:	fb 01       	movw	r30, r22
    3102:	9f 01       	movw	r18, r30
    3104:	e8 94       	clt
    3106:	42 30       	cpi	r20, 0x02	; 2
    3108:	c4 f0       	brlt	.+48     	; 0x313a <itoa+0x3a>
    310a:	45 32       	cpi	r20, 0x25	; 37
    310c:	b4 f4       	brge	.+44     	; 0x313a <itoa+0x3a>
    310e:	4a 30       	cpi	r20, 0x0A	; 10
    3110:	29 f4       	brne	.+10     	; 0x311c <itoa+0x1c>
    3112:	97 fb       	bst	r25, 7
    3114:	1e f4       	brtc	.+6      	; 0x311c <itoa+0x1c>
    3116:	90 95       	com	r25
    3118:	81 95       	neg	r24
    311a:	9f 4f       	sbci	r25, 0xFF	; 255
    311c:	64 2f       	mov	r22, r20
    311e:	77 27       	eor	r23, r23
    3120:	0e 94 b1 18 	call	0x3162	; 0x3162 <__udivmodhi4>
    3124:	80 5d       	subi	r24, 0xD0	; 208
    3126:	8a 33       	cpi	r24, 0x3A	; 58
    3128:	0c f0       	brlt	.+2      	; 0x312c <itoa+0x2c>
    312a:	89 5d       	subi	r24, 0xD9	; 217
    312c:	81 93       	st	Z+, r24
    312e:	cb 01       	movw	r24, r22
    3130:	00 97       	sbiw	r24, 0x00	; 0
    3132:	a1 f7       	brne	.-24     	; 0x311c <itoa+0x1c>
    3134:	16 f4       	brtc	.+4      	; 0x313a <itoa+0x3a>
    3136:	5d e2       	ldi	r21, 0x2D	; 45
    3138:	51 93       	st	Z+, r21
    313a:	10 82       	st	Z, r1
    313c:	c9 01       	movw	r24, r18
    313e:	0c 94 a1 18 	jmp	0x3142	; 0x3142 <strrev>

00003142 <strrev>:
    3142:	dc 01       	movw	r26, r24
    3144:	fc 01       	movw	r30, r24
    3146:	67 2f       	mov	r22, r23
    3148:	71 91       	ld	r23, Z+
    314a:	77 23       	and	r23, r23
    314c:	e1 f7       	brne	.-8      	; 0x3146 <strrev+0x4>
    314e:	32 97       	sbiw	r30, 0x02	; 2
    3150:	04 c0       	rjmp	.+8      	; 0x315a <strrev+0x18>
    3152:	7c 91       	ld	r23, X
    3154:	6d 93       	st	X+, r22
    3156:	70 83       	st	Z, r23
    3158:	62 91       	ld	r22, -Z
    315a:	ae 17       	cp	r26, r30
    315c:	bf 07       	cpc	r27, r31
    315e:	c8 f3       	brcs	.-14     	; 0x3152 <strrev+0x10>
    3160:	08 95       	ret

00003162 <__udivmodhi4>:
    3162:	aa 1b       	sub	r26, r26
    3164:	bb 1b       	sub	r27, r27
    3166:	51 e1       	ldi	r21, 0x11	; 17
    3168:	07 c0       	rjmp	.+14     	; 0x3178 <__udivmodhi4_ep>

0000316a <__udivmodhi4_loop>:
    316a:	aa 1f       	adc	r26, r26
    316c:	bb 1f       	adc	r27, r27
    316e:	a6 17       	cp	r26, r22
    3170:	b7 07       	cpc	r27, r23
    3172:	10 f0       	brcs	.+4      	; 0x3178 <__udivmodhi4_ep>
    3174:	a6 1b       	sub	r26, r22
    3176:	b7 0b       	sbc	r27, r23

00003178 <__udivmodhi4_ep>:
    3178:	88 1f       	adc	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	5a 95       	dec	r21
    317e:	a9 f7       	brne	.-22     	; 0x316a <__udivmodhi4_loop>
    3180:	80 95       	com	r24
    3182:	90 95       	com	r25
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	08 95       	ret

0000318a <_exit>:
    318a:	f8 94       	cli

0000318c <__stop_program>:
    318c:	ff cf       	rjmp	.-2      	; 0x318c <__stop_program>
